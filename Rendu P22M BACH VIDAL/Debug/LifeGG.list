
LifeGG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004330  08004330  00005330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a4  080043a4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080043a4  080043a4  000053a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043ac  080043ac  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043ac  080043ac  000053ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043b0  080043b0  000053b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080043b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  08004410  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08004410  00006250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b38f  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1d  00000000  00000000  00011414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00012f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000871  00000000  00000000  00013a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001646b  00000000  00000000  00014299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c689  00000000  00000000  0002a704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cdf4  00000000  00000000  00036d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3b81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000c3bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c6e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000005c 	.word	0x2000005c
 8000158:	00000000 	.word	0x00000000
 800015c:	08004318 	.word	0x08004318

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000060 	.word	0x20000060
 8000178:	08004318 	.word	0x08004318

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b968 	b.w	8000474 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	fb07 1114 	mls	r1, r7, r4, r1
 80001f6:	fa1f f68c 	uxth.w	r6, ip
 80001fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8110 	bcs.w	8000436 <__udivmoddi4+0x27a>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810d 	bls.w	8000436 <__udivmoddi4+0x27a>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	fb00 f606 	mul.w	r6, r0, r6
 800022e:	fa1f f38e 	uxth.w	r3, lr
 8000232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fa 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f7 	bls.w	800043a <__udivmoddi4+0x27e>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	1b9b      	subs	r3, r3, r6
 8000254:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80ee 	bcc.w	8000464 <__udivmoddi4+0x2a8>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 808f 	bne.w	80003be <__udivmoddi4+0x202>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	2101      	movs	r1, #1
 80002a6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	fb07 f006 	mul.w	r0, r7, r6
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	fb00 f707 	mul.w	r7, r0, r7
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80ae 	bhi.w	800045e <__udivmoddi4+0x2a2>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa24 f607 	lsr.w	r6, r4, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbb6 f8f9 	udiv	r8, r6, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 6618 	mls	r6, r9, r8, r6
 800032e:	fa20 f307 	lsr.w	r3, r0, r7
 8000332:	408c      	lsls	r4, r1
 8000334:	fa00 fa01 	lsl.w	sl, r0, r1
 8000338:	fb08 f00e 	mul.w	r0, r8, lr
 800033c:	431c      	orrs	r4, r3
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000344:	4298      	cmp	r0, r3
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	eb1c 0303 	adds.w	r3, ip, r3
 8000350:	f108 36ff 	add.w	r6, r8, #4294967295
 8000354:	f080 8081 	bcs.w	800045a <__udivmoddi4+0x29e>
 8000358:	4298      	cmp	r0, r3
 800035a:	d97e      	bls.n	800045a <__udivmoddi4+0x29e>
 800035c:	f1a8 0802 	sub.w	r8, r8, #2
 8000360:	4463      	add	r3, ip
 8000362:	1a1e      	subs	r6, r3, r0
 8000364:	fbb6 f3f9 	udiv	r3, r6, r9
 8000368:	fb09 6613 	mls	r6, r9, r3, r6
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	b2a4      	uxth	r4, r4
 8000372:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000376:	45a6      	cmp	lr, r4
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x1d0>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000382:	d266      	bcs.n	8000452 <__udivmoddi4+0x296>
 8000384:	45a6      	cmp	lr, r4
 8000386:	d964      	bls.n	8000452 <__udivmoddi4+0x296>
 8000388:	3b02      	subs	r3, #2
 800038a:	4464      	add	r4, ip
 800038c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000390:	fba0 8302 	umull	r8, r3, r0, r2
 8000394:	eba4 040e 	sub.w	r4, r4, lr
 8000398:	429c      	cmp	r4, r3
 800039a:	46c6      	mov	lr, r8
 800039c:	461e      	mov	r6, r3
 800039e:	d350      	bcc.n	8000442 <__udivmoddi4+0x286>
 80003a0:	d04d      	beq.n	800043e <__udivmoddi4+0x282>
 80003a2:	b155      	cbz	r5, 80003ba <__udivmoddi4+0x1fe>
 80003a4:	ebba 030e 	subs.w	r3, sl, lr
 80003a8:	eb64 0406 	sbc.w	r4, r4, r6
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	40cb      	lsrs	r3, r1
 80003b2:	431f      	orrs	r7, r3
 80003b4:	40cc      	lsrs	r4, r1
 80003b6:	e9c5 7400 	strd	r7, r4, [r5]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e751      	b.n	8000262 <__udivmoddi4+0xa6>
 80003be:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c2:	f1c2 0320 	rsb	r3, r2, #32
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa20 f303 	lsr.w	r3, r0, r3
 80003d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003d8:	fb08 1110 	mls	r1, r8, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	431c      	orrs	r4, r3
 80003e0:	fa1f f78c 	uxth.w	r7, ip
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x248>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29a>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29a>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	fbb3 f1f8 	udiv	r1, r3, r8
 800040a:	fb08 3311 	mls	r3, r8, r1, r3
 800040e:	b2a4      	uxth	r4, r4
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x272>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x292>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x292>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f2      	b.n	8000220 <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e708      	b.n	8000250 <__udivmoddi4+0x94>
 800043e:	45c2      	cmp	sl, r8
 8000440:	d2af      	bcs.n	80003a2 <__udivmoddi4+0x1e6>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 060c 	sbc.w	r6, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a9      	b.n	80003a2 <__udivmoddi4+0x1e6>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x272>
 8000452:	4603      	mov	r3, r0
 8000454:	e79a      	b.n	800038c <__udivmoddi4+0x1d0>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x248>
 800045a:	46b0      	mov	r8, r6
 800045c:	e781      	b.n	8000362 <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74f      	b.n	8000304 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e711      	b.n	8000290 <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <set_motor_direction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_motor_direction(uint8_t open)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
    // PWM vitesse moteur sur CH1
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000482:	2100      	movs	r1, #0
 8000484:	4815      	ldr	r0, [pc, #84]	@ (80004dc <set_motor_direction+0x64>)
 8000486:	f001 fe3d 	bl	8002104 <HAL_TIM_PWM_Start>

    if (open)
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d010      	beq.n	80004b2 <set_motor_direction+0x3a>
    {
        // Ouverture : DIR = 0
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2120      	movs	r1, #32
 8000494:	4812      	ldr	r0, [pc, #72]	@ (80004e0 <set_motor_direction+0x68>)
 8000496:	f000 ff9e 	bl	80013d6 <HAL_GPIO_WritePin>

        // LEDs indicatrices
        HAL_GPIO_WritePin(LED_L_PORT, LED_L1_PIN, GPIO_PIN_SET);
 800049a:	2201      	movs	r2, #1
 800049c:	2104      	movs	r1, #4
 800049e:	4810      	ldr	r0, [pc, #64]	@ (80004e0 <set_motor_direction+0x68>)
 80004a0:	f000 ff99 	bl	80013d6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_L_PORT, LED_L2_PIN, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004aa:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <set_motor_direction+0x68>)
 80004ac:	f000 ff93 	bl	80013d6 <HAL_GPIO_WritePin>

        // LEDs indicatrices
        HAL_GPIO_WritePin(LED_L_PORT, LED_L1_PIN, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(LED_L_PORT, LED_L2_PIN, GPIO_PIN_SET);
    }
}
 80004b0:	e00f      	b.n	80004d2 <set_motor_direction+0x5a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2120      	movs	r1, #32
 80004b6:	480a      	ldr	r0, [pc, #40]	@ (80004e0 <set_motor_direction+0x68>)
 80004b8:	f000 ff8d 	bl	80013d6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_L_PORT, LED_L1_PIN, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2104      	movs	r1, #4
 80004c0:	4807      	ldr	r0, [pc, #28]	@ (80004e0 <set_motor_direction+0x68>)
 80004c2:	f000 ff88 	bl	80013d6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_L_PORT, LED_L2_PIN, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004cc:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <set_motor_direction+0x68>)
 80004ce:	f000 ff82 	bl	80013d6 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000078 	.word	0x20000078
 80004e0:	40020400 	.word	0x40020400

080004e4 <stop_motor>:

void stop_motor()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	4808      	ldr	r0, [pc, #32]	@ (800050c <stop_motor+0x28>)
 80004ec:	f001 fea0 	bl	8002230 <HAL_TIM_PWM_Stop>

    HAL_GPIO_WritePin(LED_L_PORT, LED_L1_PIN, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2104      	movs	r1, #4
 80004f4:	4806      	ldr	r0, [pc, #24]	@ (8000510 <stop_motor+0x2c>)
 80004f6:	f000 ff6e 	bl	80013d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_L_PORT, LED_L2_PIN, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000500:	4803      	ldr	r0, [pc, #12]	@ (8000510 <stop_motor+0x2c>)
 8000502:	f000 ff68 	bl	80013d6 <HAL_GPIO_WritePin>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000078 	.word	0x20000078
 8000510:	40020400 	.word	0x40020400

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	@ 0x40
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fb98 	bl	8000c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f883 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f96d 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f941 	bl	80007ac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800052a:	f000 f8cb 	bl	80006c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t portique_state = 0; // 0: fermé, 1: ouvert, 2: en fermeture
 800052e:	2300      	movs	r3, #0
 8000530:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t pir_last_detect_time = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t mouvement_start_time = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
         GPIO_PinState pir_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800053c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000540:	4836      	ldr	r0, [pc, #216]	@ (800061c <main+0x108>)
 8000542:	f000 ff31 	bl	80013a8 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33


         // Debug UART vers TeraTerm
         char msg[50];
         sprintf(msg, "PIR: %d | Portique: %d\r\n", pir_state, portique_state);
 800054c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000550:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000554:	4638      	mov	r0, r7
 8000556:	4932      	ldr	r1, [pc, #200]	@ (8000620 <main+0x10c>)
 8000558:	f003 fa2e 	bl	80039b8 <siprintf>
         HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800055c:	463b      	mov	r3, r7
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe0c 	bl	800017c <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	b29a      	uxth	r2, r3
 8000568:	4639      	mov	r1, r7
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	482d      	ldr	r0, [pc, #180]	@ (8000624 <main+0x110>)
 8000570:	f002 fbf2 	bl	8002d58 <HAL_UART_Transmit>

         // Gestion logique moteur
         if (pir_state == GPIO_PIN_SET)
 8000574:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10f      	bne.n	800059c <main+0x88>
                {
                    pir_last_detect_time = HAL_GetTick();
 800057c:	f000 fbcc 	bl	8000d18 <HAL_GetTick>
 8000580:	63b8      	str	r0, [r7, #56]	@ 0x38

                    if (portique_state != 1) // pas déjà ouvert
 8000582:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000586:	2b01      	cmp	r3, #1
 8000588:	d008      	beq.n	800059c <main+0x88>
                    {
                        set_motor_direction(1); // ouverture
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff ff74 	bl	8000478 <set_motor_direction>
                        mouvement_start_time = HAL_GetTick();
 8000590:	f000 fbc2 	bl	8000d18 <HAL_GetTick>
 8000594:	6378      	str	r0, [r7, #52]	@ 0x34
                        portique_state = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                    }
                }

                if (pir_state == GPIO_PIN_RESET && portique_state == 1)
 800059c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d115      	bne.n	80005d0 <main+0xbc>
 80005a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d111      	bne.n	80005d0 <main+0xbc>
                {
                    if (HAL_GetTick() - pir_last_detect_time >= 10000) // 10s sans détection
 80005ac:	f000 fbb4 	bl	8000d18 <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d908      	bls.n	80005d0 <main+0xbc>
                    {
                        set_motor_direction(0); // fermeture
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ff5a 	bl	8000478 <set_motor_direction>
                        mouvement_start_time = HAL_GetTick();
 80005c4:	f000 fba8 	bl	8000d18 <HAL_GetTick>
 80005c8:	6378      	str	r0, [r7, #52]	@ 0x34
                        portique_state = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                    }
                }

                // Stop moteur ouverture après 10s d'action
                if (portique_state == 1 && (HAL_GetTick() - mouvement_start_time >= 10000))
 80005d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d10a      	bne.n	80005ee <main+0xda>
 80005d8:	f000 fb9e 	bl	8000d18 <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d901      	bls.n	80005ee <main+0xda>
                {
                    stop_motor();
 80005ea:	f7ff ff7b 	bl	80004e4 <stop_motor>
                }

                // Stop moteur fermeture après 10s d'action
                if (portique_state == 2 && (HAL_GetTick() - mouvement_start_time >= 10000))
 80005ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d10d      	bne.n	8000612 <main+0xfe>
 80005f6:	f000 fb8f 	bl	8000d18 <HAL_GetTick>
 80005fa:	4602      	mov	r2, r0
 80005fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000604:	4293      	cmp	r3, r2
 8000606:	d904      	bls.n	8000612 <main+0xfe>
                {
                    stop_motor();
 8000608:	f7ff ff6c 	bl	80004e4 <stop_motor>
                    portique_state = 0; // Devenu fermé
 800060c:	2300      	movs	r3, #0
 800060e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                }

         HAL_Delay(1000); // Evite le flood UART
 8000612:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000616:	f000 fb89 	bl	8000d2c <HAL_Delay>
  {
 800061a:	e78f      	b.n	800053c <main+0x28>
 800061c:	40020000 	.word	0x40020000
 8000620:	08004330 	.word	0x08004330
 8000624:	200000b8 	.word	0x200000b8

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b092      	sub	sp, #72	@ 0x48
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2234      	movs	r2, #52	@ 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 f9de 	bl	80039f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <SystemClock_Config+0x98>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000652:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <SystemClock_Config+0x98>)
 8000654:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000658:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065a:	2302      	movs	r3, #2
 800065c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2310      	movs	r3, #16
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	2300      	movs	r3, #0
 800066c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800066e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000674:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fec2 	bl	8001408 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800068a:	f000 f95f 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	2101      	movs	r1, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f9de 	bl	8001a68 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006b2:	f000 f94b 	bl	800094c <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3748      	adds	r7, #72	@ 0x48
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 80006f0:	4a2d      	ldr	r2, [pc, #180]	@ (80007a8 <MX_TIM3_Init+0xe4>)
 80006f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 8000702:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000714:	4823      	ldr	r0, [pc, #140]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 8000716:	f001 fc6d 	bl	8001ff4 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f914 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000728:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0318 	add.w	r3, r7, #24
 800072e:	4619      	mov	r1, r3
 8000730:	481c      	ldr	r0, [pc, #112]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 8000732:	f001 ff49 	bl	80025c8 <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800073c:	f000 f906 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000740:	4818      	ldr	r0, [pc, #96]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 8000742:	f001 fc96 	bl	8002072 <HAL_TIM_PWM_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800074c:	f000 f8fe 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 8000760:	f002 fa4c 	bl	8002bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800076a:	f000 f8ef 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076e:	2360      	movs	r3, #96	@ 0x60
 8000770:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32000;
 8000772:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000776:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 8000788:	f001 fe5c 	bl	8002444 <HAL_TIM_PWM_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000792:	f000 f8db 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000796:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <MX_TIM3_Init+0xe0>)
 8000798:	f000 f934 	bl	8000a04 <HAL_TIM_MspPostInit>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000078 	.word	0x20000078
 80007a8:	40000400 	.word	0x40000400

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f002 fa68 	bl	8002cb8 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f8ad 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000b8 	.word	0x200000b8
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x13c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x13c>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x13c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x13c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x13c>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x13c>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x13c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x13c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x13c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b37      	ldr	r3, [pc, #220]	@ (800093c <MX_GPIO_Init+0x13c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a36      	ldr	r2, [pc, #216]	@ (800093c <MX_GPIO_Init+0x13c>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b34      	ldr	r3, [pc, #208]	@ (800093c <MX_GPIO_Init+0x13c>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	4831      	ldr	r0, [pc, #196]	@ (8000940 <MX_GPIO_Init+0x140>)
 800087c:	f000 fdab 	bl	80013d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L1_Pin|L2_Pin|GPIO_PIN_5|L7_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f240 4164 	movw	r1, #1124	@ 0x464
 8000886:	482f      	ldr	r0, [pc, #188]	@ (8000944 <MX_GPIO_Init+0x144>)
 8000888:	f000 fda5 	bl	80013d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4829      	ldr	r0, [pc, #164]	@ (8000948 <MX_GPIO_Init+0x148>)
 80008a4:	f000 fbf0 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a8:	2320      	movs	r3, #32
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4820      	ldr	r0, [pc, #128]	@ (8000940 <MX_GPIO_Init+0x140>)
 80008c0:	f000 fbe2 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : L1_Pin L2_Pin PB5 L7_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin|GPIO_PIN_5|L7_Pin;
 80008c4:	f240 4364 	movw	r3, #1124	@ 0x464
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4819      	ldr	r0, [pc, #100]	@ (8000944 <MX_GPIO_Init+0x144>)
 80008de:	f000 fbd3 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	@ (8000940 <MX_GPIO_Init+0x140>)
 80008f8:	f000 fbc6 	bl	8001088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80008fc:	2330      	movs	r3, #48	@ 0x30
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_GPIO_Init+0x144>)
 8000914:	f000 fbb8 	bl	8001088 <HAL_GPIO_Init>

  // Moteur control PB4/PB5
  GPIO_InitStruct.Pin = DIRECTION_OPEN_PIN | DIRECTION_CLOSE_PIN;
 8000918:	2330      	movs	r3, #48	@ 0x30
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION_PORT, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_GPIO_Init+0x144>)
 8000930:	f000 fbaa 	bl	8001088 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	@ 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400
 8000948:	40020800 	.word	0x40020800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_MspInit+0x5c>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000962:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <HAL_MspInit+0x5c>)
 8000964:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000968:	6253      	str	r3, [r2, #36]	@ 0x24
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_MspInit+0x5c>)
 800096c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_MspInit+0x5c>)
 8000978:	6a1b      	ldr	r3, [r3, #32]
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <HAL_MspInit+0x5c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6213      	str	r3, [r2, #32]
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_MspInit+0x5c>)
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x5c>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_MspInit+0x5c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000998:	6253      	str	r3, [r2, #36]	@ 0x24
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x5c>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a6:	2007      	movs	r0, #7
 80009a8:	f000 faae 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <HAL_TIM_Base_MspInit+0x44>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d113      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <HAL_TIM_Base_MspInit+0x48>)
 80009cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000a00 <HAL_TIM_Base_MspInit+0x48>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6253      	str	r3, [r2, #36]	@ 0x24
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_TIM_Base_MspInit+0x48>)
 80009d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	201d      	movs	r0, #29
 80009e8:	f000 fa99 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009ec:	201d      	movs	r0, #29
 80009ee:	f000 fab2 	bl	8000f56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40000400 	.word	0x40000400
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a11      	ldr	r2, [pc, #68]	@ (8000a68 <HAL_TIM_MspPostInit+0x64>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d11b      	bne.n	8000a5e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_TIM_MspPostInit+0x68>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_TIM_MspPostInit+0x68>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_TIM_MspPostInit+0x68>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_TIM_MspPostInit+0x6c>)
 8000a5a:	f000 fb15 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1b      	ldr	r2, [pc, #108]	@ (8000b00 <HAL_UART_MspInit+0x8c>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12f      	bne.n	8000af6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	6253      	str	r3, [r2, #36]	@ 0x24
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <HAL_UART_MspInit+0x94>)
 8000ae2:	f000 fad1 	bl	8001088 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2026      	movs	r0, #38	@ 0x26
 8000aec:	f000 fa17 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000af0:	2026      	movs	r0, #38	@ 0x26
 8000af2:	f000 fa30 	bl	8000f56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f8ca 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <TIM3_IRQHandler+0x10>)
 8000b6a:	f001 fb9e 	bl	80022aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000078 	.word	0x20000078

08000b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <USART2_IRQHandler+0x10>)
 8000b7e:	f002 f977 	bl	8002e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000b8 	.word	0x200000b8

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f002 ff24 	bl	8003a08 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20014000 	.word	0x20014000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000100 	.word	0x20000100
 8000bf4:	20000250 	.word	0x20000250

08000bf8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff fff8 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0a:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a09      	ldr	r2, [pc, #36]	@ (8000c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c20:	4c09      	ldr	r4, [pc, #36]	@ (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f002 fef1 	bl	8003a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fc6f 	bl	8000514 <main>
  bx lr
 8000c36:	4770      	bx	lr
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c40:	080043b4 	.word	0x080043b4
  ldr r2, =_sbss
 8000c44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c48:	20000250 	.word	0x20000250

08000c4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_IRQHandler>

08000c4e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f955 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f80e 	bl	8000c80 <HAL_InitTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	e001      	b.n	8000c74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c70:	f7ff fe72 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <HAL_InitTick+0x68>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d022      	beq.n	8000cda <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_InitTick+0x6c>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <HAL_InitTick+0x68>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f962 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10f      	bne.n	8000cd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d809      	bhi.n	8000cce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc2:	f000 f92c 	bl	8000f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <HAL_InitTick+0x70>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	e007      	b.n	8000cde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e004      	b.n	8000cde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e001      	b.n	8000cde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_IncTick+0x20>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a03      	ldr	r2, [pc, #12]	@ (8000d10 <HAL_IncTick+0x1c>)
 8000d04:	6013      	str	r3, [r2, #0]
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000104 	.word	0x20000104
 8000d14:	20000008 	.word	0x20000008

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	@ (8000d28 <HAL_GetTick+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	20000104 	.word	0x20000104

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff fff0 	bl	8000d18 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d004      	beq.n	8000d50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_Delay+0x40>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d50:	bf00      	nop
 8000d52:	f7ff ffe1 	bl	8000d18 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d8f7      	bhi.n	8000d52 <HAL_Delay+0x26>
  {
  }
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4906      	ldr	r1, [pc, #24]	@ (8000e08 <__NVIC_EnableIRQ+0x34>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff90 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff2d 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff42 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff90 	bl	8000e60 <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5f 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff35 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d008      	beq.n	8000fb4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e022      	b.n	8000ffa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 020e 	bic.w	r2, r2, #14
 8000fc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	f003 021c 	and.w	r2, r3, #28
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d005      	beq.n	8001028 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2204      	movs	r2, #4
 8001020:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e029      	b.n	800107c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 020e 	bic.w	r2, r2, #14
 8001036:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	f003 021c 	and.w	r2, r3, #28
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	4798      	blx	r3
    }
  }
  return status;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800109e:	e160      	b.n	8001362 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8152 	beq.w	800135c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d005      	beq.n	80010d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 0201 	and.w	r2, r3, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b03      	cmp	r3, #3
 800113c:	d017      	beq.n	800116e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001186:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	6939      	ldr	r1, [r7, #16]
 80011be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0203 	and.w	r2, r3, #3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80ac 	beq.w	800135c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001204:	4b5e      	ldr	r3, [pc, #376]	@ (8001380 <HAL_GPIO_Init+0x2f8>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a5d      	ldr	r2, [pc, #372]	@ (8001380 <HAL_GPIO_Init+0x2f8>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	4b5b      	ldr	r3, [pc, #364]	@ (8001380 <HAL_GPIO_Init+0x2f8>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800121c:	4a59      	ldr	r2, [pc, #356]	@ (8001384 <HAL_GPIO_Init+0x2fc>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a51      	ldr	r2, [pc, #324]	@ (8001388 <HAL_GPIO_Init+0x300>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d025      	beq.n	8001294 <HAL_GPIO_Init+0x20c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a50      	ldr	r2, [pc, #320]	@ (800138c <HAL_GPIO_Init+0x304>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d01f      	beq.n	8001290 <HAL_GPIO_Init+0x208>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a4f      	ldr	r2, [pc, #316]	@ (8001390 <HAL_GPIO_Init+0x308>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d019      	beq.n	800128c <HAL_GPIO_Init+0x204>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4e      	ldr	r2, [pc, #312]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x200>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a4d      	ldr	r2, [pc, #308]	@ (8001398 <HAL_GPIO_Init+0x310>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1fc>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a4c      	ldr	r2, [pc, #304]	@ (800139c <HAL_GPIO_Init+0x314>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1f8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a4b      	ldr	r2, [pc, #300]	@ (80013a0 <HAL_GPIO_Init+0x318>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1f4>
 8001278:	2306      	movs	r3, #6
 800127a:	e00c      	b.n	8001296 <HAL_GPIO_Init+0x20e>
 800127c:	2307      	movs	r3, #7
 800127e:	e00a      	b.n	8001296 <HAL_GPIO_Init+0x20e>
 8001280:	2305      	movs	r3, #5
 8001282:	e008      	b.n	8001296 <HAL_GPIO_Init+0x20e>
 8001284:	2304      	movs	r3, #4
 8001286:	e006      	b.n	8001296 <HAL_GPIO_Init+0x20e>
 8001288:	2303      	movs	r3, #3
 800128a:	e004      	b.n	8001296 <HAL_GPIO_Init+0x20e>
 800128c:	2302      	movs	r3, #2
 800128e:	e002      	b.n	8001296 <HAL_GPIO_Init+0x20e>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <HAL_GPIO_Init+0x20e>
 8001294:	2300      	movs	r3, #0
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	f002 0203 	and.w	r2, r2, #3
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	4093      	lsls	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012a6:	4937      	ldr	r1, [pc, #220]	@ (8001384 <HAL_GPIO_Init+0x2fc>)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d8:	4a32      	ldr	r2, [pc, #200]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012de:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001302:	4a28      	ldr	r2, [pc, #160]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001308:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800132c:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001356:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	f47f ae97 	bne.w	80010a0 <HAL_GPIO_Init+0x18>
  }
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40010000 	.word	0x40010000
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]
 80013e2:	4613      	mov	r3, r2
 80013e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e6:	787b      	ldrb	r3, [r7, #1]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ec:	887a      	ldrh	r2, [r7, #2]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80013f2:	e003      	b.n	80013fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
	...

08001408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e31d      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141a:	4b94      	ldr	r3, [pc, #592]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001424:	4b91      	ldr	r3, [pc, #580]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d07b      	beq.n	8001532 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b08      	cmp	r3, #8
 800143e:	d006      	beq.n	800144e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b0c      	cmp	r3, #12
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x5e>
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800144c:	d10b      	bne.n	8001466 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144e:	4b87      	ldr	r3, [pc, #540]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d06a      	beq.n	8001530 <HAL_RCC_OscConfig+0x128>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d166      	bne.n	8001530 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e2f7      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x74>
 800146e:	4b7f      	ldr	r3, [pc, #508]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7e      	ldr	r2, [pc, #504]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e02d      	b.n	80014d8 <HAL_RCC_OscConfig+0xd0>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x96>
 8001484:	4b79      	ldr	r3, [pc, #484]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a78      	ldr	r2, [pc, #480]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b76      	ldr	r3, [pc, #472]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a75      	ldr	r2, [pc, #468]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e01c      	b.n	80014d8 <HAL_RCC_OscConfig+0xd0>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0xb8>
 80014a6:	4b71      	ldr	r3, [pc, #452]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a70      	ldr	r2, [pc, #448]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6e      	ldr	r3, [pc, #440]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6d      	ldr	r2, [pc, #436]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xd0>
 80014c0:	4b6a      	ldr	r3, [pc, #424]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a69      	ldr	r2, [pc, #420]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b67      	ldr	r3, [pc, #412]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a66      	ldr	r2, [pc, #408]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc1a 	bl	8000d18 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fc16 	bl	8000d18 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e2ad      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014fa:	4b5c      	ldr	r3, [pc, #368]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe0>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fc06 	bl	8000d18 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fc02 	bl	8000d18 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e299      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001522:	4b52      	ldr	r3, [pc, #328]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x108>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d05a      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d119      	bne.n	800157e <HAL_RCC_OscConfig+0x176>
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d116      	bne.n	800157e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001550:	4b46      	ldr	r3, [pc, #280]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x160>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d001      	beq.n	8001568 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e276      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b40      	ldr	r3, [pc, #256]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	493d      	ldr	r1, [pc, #244]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157c:	e03a      	b.n	80015f4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d020      	beq.n	80015c8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001586:	4b3a      	ldr	r3, [pc, #232]	@ (8001670 <HAL_RCC_OscConfig+0x268>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fbc4 	bl	8000d18 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001594:	f7ff fbc0 	bl	8000d18 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e257      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a6:	4b31      	ldr	r3, [pc, #196]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	492a      	ldr	r1, [pc, #168]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
 80015c6:	e015      	b.n	80015f4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c8:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <HAL_RCC_OscConfig+0x268>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fba3 	bl	8000d18 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb9f 	bl	8000d18 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e236      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80b8 	beq.w	8001772 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d170      	bne.n	80016ea <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x218>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e21a      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800162c:	429a      	cmp	r2, r3
 800162e:	d921      	bls.n	8001674 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fc7d 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e208      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4906      	ldr	r1, [pc, #24]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	061b      	lsls	r3, r3, #24
 8001664:	4901      	ldr	r1, [pc, #4]	@ (800166c <HAL_RCC_OscConfig+0x264>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
 800166a:	e020      	b.n	80016ae <HAL_RCC_OscConfig+0x2a6>
 800166c:	40023800 	.word	0x40023800
 8001670:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001674:	4b99      	ldr	r3, [pc, #612]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4996      	ldr	r1, [pc, #600]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001686:	4b95      	ldr	r3, [pc, #596]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	4991      	ldr	r1, [pc, #580]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fc48 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1d3      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	0b5b      	lsrs	r3, r3, #13
 80016b4:	3301      	adds	r3, #1
 80016b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016be:	4a87      	ldr	r2, [pc, #540]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80016c0:	6892      	ldr	r2, [r2, #8]
 80016c2:	0912      	lsrs	r2, r2, #4
 80016c4:	f002 020f 	and.w	r2, r2, #15
 80016c8:	4985      	ldr	r1, [pc, #532]	@ (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80016ca:	5c8a      	ldrb	r2, [r1, r2]
 80016cc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016ce:	4a85      	ldr	r2, [pc, #532]	@ (80018e4 <HAL_RCC_OscConfig+0x4dc>)
 80016d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016d2:	4b85      	ldr	r3, [pc, #532]	@ (80018e8 <HAL_RCC_OscConfig+0x4e0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fad2 	bl	8000c80 <HAL_InitTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d045      	beq.n	8001772 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	e1b5      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d029      	beq.n	8001746 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016f2:	4b7e      	ldr	r3, [pc, #504]	@ (80018ec <HAL_RCC_OscConfig+0x4e4>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb0e 	bl	8000d18 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001700:	f7ff fb0a 	bl	8000d18 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1a1      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001712:	4b72      	ldr	r3, [pc, #456]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800171e:	4b6f      	ldr	r3, [pc, #444]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	496c      	ldr	r1, [pc, #432]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001730:	4b6a      	ldr	r3, [pc, #424]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	4967      	ldr	r1, [pc, #412]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001746:	4b69      	ldr	r3, [pc, #420]	@ (80018ec <HAL_RCC_OscConfig+0x4e4>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fae4 	bl	8000d18 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001754:	f7ff fae0 	bl	8000d18 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e177      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001766:	4b5d      	ldr	r3, [pc, #372]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d030      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d016      	beq.n	80017b4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b5a      	ldr	r3, [pc, #360]	@ (80018f0 <HAL_RCC_OscConfig+0x4e8>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fac4 	bl	8000d18 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fac0 	bl	8000d18 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e157      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017a6:	4b4d      	ldr	r3, [pc, #308]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80017a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x38c>
 80017b2:	e015      	b.n	80017e0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b4:	4b4e      	ldr	r3, [pc, #312]	@ (80018f0 <HAL_RCC_OscConfig+0x4e8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff faad 	bl	8000d18 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff faa9 	bl	8000d18 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e140      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017d4:	4b41      	ldr	r3, [pc, #260]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80b5 	beq.w	8001958 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4b3a      	ldr	r3, [pc, #232]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10d      	bne.n	800181a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	4a36      	ldr	r2, [pc, #216]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6253      	str	r3, [r2, #36]	@ 0x24
 800180a:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b36      	ldr	r3, [pc, #216]	@ (80018f4 <HAL_RCC_OscConfig+0x4ec>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001826:	4b33      	ldr	r3, [pc, #204]	@ (80018f4 <HAL_RCC_OscConfig+0x4ec>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a32      	ldr	r2, [pc, #200]	@ (80018f4 <HAL_RCC_OscConfig+0x4ec>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff fa71 	bl	8000d18 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7ff fa6d 	bl	8000d18 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	@ 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e104      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	4b29      	ldr	r3, [pc, #164]	@ (80018f4 <HAL_RCC_OscConfig+0x4ec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x466>
 8001860:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001864:	4a1d      	ldr	r2, [pc, #116]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186a:	6353      	str	r3, [r2, #52]	@ 0x34
 800186c:	e02d      	b.n	80018ca <HAL_RCC_OscConfig+0x4c2>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x488>
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187a:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 800187c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001880:	6353      	str	r3, [r2, #52]	@ 0x34
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001886:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 8001888:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800188c:	6353      	str	r3, [r2, #52]	@ 0x34
 800188e:	e01c      	b.n	80018ca <HAL_RCC_OscConfig+0x4c2>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d10c      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4aa>
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 800189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189c:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80018a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a8:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80018b0:	e00b      	b.n	80018ca <HAL_RCC_OscConfig+0x4c2>
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80018b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80018b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80018c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c2:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80018c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80018c8:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d024      	beq.n	800191c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fa21 	bl	8000d18 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018d8:	e019      	b.n	800190e <HAL_RCC_OscConfig+0x506>
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	08004358 	.word	0x08004358
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004
 80018ec:	42470020 	.word	0x42470020
 80018f0:	42470680 	.word	0x42470680
 80018f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff fa0e 	bl	8000d18 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0a3      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190e:	4b54      	ldr	r3, [pc, #336]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 8001910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0ee      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4f0>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff f9fc 	bl	8000d18 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff f9f8 	bl	8000d18 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e08d      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 800193c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ee      	bne.n	8001924 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b44      	ldr	r3, [pc, #272]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001950:	4a43      	ldr	r2, [pc, #268]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001956:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	2b00      	cmp	r3, #0
 800195e:	d079      	beq.n	8001a54 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d056      	beq.n	8001a14 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	2b02      	cmp	r3, #2
 800196c:	d13b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <HAL_RCC_OscConfig+0x65c>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff f9d0 	bl	8000d18 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f9cc 	bl	8000d18 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e063      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800198e:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199a:	4b31      	ldr	r3, [pc, #196]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	4319      	orrs	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	430b      	orrs	r3, r1
 80019b2:	492b      	ldr	r1, [pc, #172]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <HAL_RCC_OscConfig+0x65c>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff f9ab 	bl	8000d18 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f9a7 	bl	8000d18 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e03e      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x5be>
 80019e4:	e036      	b.n	8001a54 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_RCC_OscConfig+0x65c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f994 	bl	8000d18 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f990 	bl	8000d18 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e027      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5ec>
 8001a12:	e01f      	b.n	8001a54 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e01a      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <HAL_RCC_OscConfig+0x658>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d10d      	bne.n	8001a50 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d106      	bne.n	8001a50 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	42470060 	.word	0x42470060

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e11a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d919      	bls.n	8001abe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x34>
 8001a90:	4b8a      	ldr	r3, [pc, #552]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a89      	ldr	r2, [pc, #548]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b87      	ldr	r3, [pc, #540]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 0201 	bic.w	r2, r3, #1
 8001aa4:	4985      	ldr	r1, [pc, #532]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aac:	4b83      	ldr	r3, [pc, #524]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0f9      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d008      	beq.n	8001adc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aca:	4b7d      	ldr	r3, [pc, #500]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	497a      	ldr	r1, [pc, #488]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 808e 	beq.w	8001c06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001af2:	4b73      	ldr	r3, [pc, #460]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d121      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0d7      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0cb      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b22:	4b67      	ldr	r3, [pc, #412]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0bf      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b32:	4b63      	ldr	r3, [pc, #396]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0b7      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	495c      	ldr	r1, [pc, #368]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f8e0 	bl	8000d18 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d112      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff f8d8 	bl	8000d18 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e09b      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7a:	4b51      	ldr	r3, [pc, #324]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d1ee      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xfc>
 8001b86:	e03e      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d112      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f7ff f8c1 	bl	8000d18 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e084      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba8:	4b45      	ldr	r3, [pc, #276]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	d1ee      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x12a>
 8001bb4:	e027      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d11d      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff f8aa 	bl	8000d18 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e06d      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x158>
 8001be2:	e010      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7ff f898 	bl	8000d18 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e05b      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bfa:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ee      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c06:	4b2d      	ldr	r3, [pc, #180]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d219      	bcs.n	8001c48 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x1be>
 8001c1a:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a27      	ldr	r2, [pc, #156]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0201 	bic.w	r2, r3, #1
 8001c2e:	4923      	ldr	r1, [pc, #140]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <HAL_RCC_ClockConfig+0x254>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e034      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c54:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4917      	ldr	r1, [pc, #92]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	490f      	ldr	r1, [pc, #60]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c86:	f000 f823 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_RCC_ClockConfig+0x258>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	490b      	ldr	r1, [pc, #44]	@ (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c98:	5ccb      	ldrb	r3, [r1, r3]
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe ffea 	bl	8000c80 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cb0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08004358 	.word	0x08004358
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd4:	b092      	sub	sp, #72	@ 0x48
 8001cd6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cd8:	4b79      	ldr	r3, [pc, #484]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d00d      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	f200 80d5 	bhi.w	8001e98 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x28>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x2e>
 8001cf6:	e0cf      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b72      	ldr	r3, [pc, #456]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001cfa:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001cfc:	e0da      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cfe:	4b72      	ldr	r3, [pc, #456]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001d00:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001d02:	e0d7      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	f003 020f 	and.w	r2, r3, #15
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d14:	0d9b      	lsrs	r3, r3, #22
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1e:	4b68      	ldr	r3, [pc, #416]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d05d      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4611      	mov	r1, r2
 8001d32:	4604      	mov	r4, r0
 8001d34:	460d      	mov	r5, r1
 8001d36:	4622      	mov	r2, r4
 8001d38:	462b      	mov	r3, r5
 8001d3a:	f04f 0000 	mov.w	r0, #0
 8001d3e:	f04f 0100 	mov.w	r1, #0
 8001d42:	0159      	lsls	r1, r3, #5
 8001d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d48:	0150      	lsls	r0, r2, #5
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4621      	mov	r1, r4
 8001d50:	1a51      	subs	r1, r2, r1
 8001d52:	6139      	str	r1, [r7, #16]
 8001d54:	4629      	mov	r1, r5
 8001d56:	eb63 0301 	sbc.w	r3, r3, r1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d68:	4659      	mov	r1, fp
 8001d6a:	018b      	lsls	r3, r1, #6
 8001d6c:	4651      	mov	r1, sl
 8001d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d72:	4651      	mov	r1, sl
 8001d74:	018a      	lsls	r2, r1, #6
 8001d76:	46d4      	mov	ip, sl
 8001d78:	ebb2 080c 	subs.w	r8, r2, ip
 8001d7c:	4659      	mov	r1, fp
 8001d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d96:	4690      	mov	r8, r2
 8001d98:	4699      	mov	r9, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	eb18 0303 	adds.w	r3, r8, r3
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	462b      	mov	r3, r5
 8001da4:	eb49 0303 	adc.w	r3, r9, r3
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001db6:	4629      	mov	r1, r5
 8001db8:	024b      	lsls	r3, r1, #9
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	024a      	lsls	r2, r1, #9
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dce:	2200      	movs	r2, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dd8:	f7fe f9d8 	bl	800018c <__aeabi_uldivmod>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4613      	mov	r3, r2
 8001de2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001de4:	e055      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de8:	2200      	movs	r2, #0
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	627a      	str	r2, [r7, #36]	@ 0x24
 8001dee:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001df2:	4642      	mov	r2, r8
 8001df4:	464b      	mov	r3, r9
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	0159      	lsls	r1, r3, #5
 8001e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e04:	0150      	lsls	r0, r2, #5
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	46c4      	mov	ip, r8
 8001e0c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001e10:	4640      	mov	r0, r8
 8001e12:	4649      	mov	r1, r9
 8001e14:	468c      	mov	ip, r1
 8001e16:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e26:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e2a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e2e:	ebb2 040a 	subs.w	r4, r2, sl
 8001e32:	eb63 050b 	sbc.w	r5, r3, fp
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	00eb      	lsls	r3, r5, #3
 8001e40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e44:	00e2      	lsls	r2, r4, #3
 8001e46:	4614      	mov	r4, r2
 8001e48:	461d      	mov	r5, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	18e3      	adds	r3, r4, r3
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	460b      	mov	r3, r1
 8001e52:	eb45 0303 	adc.w	r3, r5, r3
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e64:	4629      	mov	r1, r5
 8001e66:	028b      	lsls	r3, r1, #10
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001e72:	4601      	mov	r1, r0
 8001e74:	028a      	lsls	r2, r1, #10
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	61fa      	str	r2, [r7, #28]
 8001e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e86:	f7fe f981 	bl	800018c <__aeabi_uldivmod>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4613      	mov	r3, r2
 8001e90:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8001e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e94:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001e96:	e00d      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	0b5b      	lsrs	r3, r3, #13
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001eb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3748      	adds	r7, #72	@ 0x48
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	007a1200 	.word	0x007a1200
 8001ecc:	0800434c 	.word	0x0800434c

08001ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed4:	4b02      	ldr	r3, [pc, #8]	@ (8001ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ee8:	f7ff fff2 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4903      	ldr	r1, [pc, #12]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	08004368 	.word	0x08004368

08001f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f10:	f7ff ffde 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0adb      	lsrs	r3, r3, #11
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	@ (8001f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08004368 	.word	0x08004368

08001f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f40:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d12c      	bne.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f4c:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001f58:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e016      	b.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001f70:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001f84:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001f98:	d105      	bne.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001fa0:	d101      	bne.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001fac:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 0201 	bic.w	r2, r3, #1
 8001fc0:	490b      	ldr	r1, [pc, #44]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	40023c00 	.word	0x40023c00

08001ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e031      	b.n	800206a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fccc 	bl	80009b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3304      	adds	r3, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f000 fbbc 	bl	80027b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e031      	b.n	80020e8 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f829 	bl	80020f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f000 fb7d 	bl	80027b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
	...

08002104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_TIM_PWM_Start+0x24>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e022      	b.n	800216e <HAL_TIM_PWM_Start+0x6a>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b04      	cmp	r3, #4
 800212c:	d109      	bne.n	8002142 <HAL_TIM_PWM_Start+0x3e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b01      	cmp	r3, #1
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	e015      	b.n	800216e <HAL_TIM_PWM_Start+0x6a>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d109      	bne.n	800215c <HAL_TIM_PWM_Start+0x58>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e008      	b.n	800216e <HAL_TIM_PWM_Start+0x6a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e051      	b.n	800221a <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d104      	bne.n	8002186 <HAL_TIM_PWM_Start+0x82>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002184:	e013      	b.n	80021ae <HAL_TIM_PWM_Start+0xaa>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d104      	bne.n	8002196 <HAL_TIM_PWM_Start+0x92>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002194:	e00b      	b.n	80021ae <HAL_TIM_PWM_Start+0xaa>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d104      	bne.n	80021a6 <HAL_TIM_PWM_Start+0xa2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80021a4:	e003      	b.n	80021ae <HAL_TIM_PWM_Start+0xaa>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2201      	movs	r2, #1
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fcfb 	bl	8002bb2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c4:	d00e      	beq.n	80021e4 <HAL_TIM_PWM_Start+0xe0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a16      	ldr	r2, [pc, #88]	@ (8002224 <HAL_TIM_PWM_Start+0x120>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_TIM_PWM_Start+0xe0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <HAL_TIM_PWM_Start+0x124>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_TIM_PWM_Start+0xe0>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a13      	ldr	r2, [pc, #76]	@ (800222c <HAL_TIM_PWM_Start+0x128>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d010      	beq.n	8002218 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	e007      	b.n	8002218 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40010800 	.word	0x40010800

08002230 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fcb5 	bl	8002bb2 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_TIM_PWM_Stop+0x38>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <HAL_TIM_PWM_Stop+0x48>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002276:	e013      	b.n	80022a0 <HAL_TIM_PWM_Stop+0x70>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d104      	bne.n	8002288 <HAL_TIM_PWM_Stop+0x58>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002286:	e00b      	b.n	80022a0 <HAL_TIM_PWM_Stop+0x70>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b08      	cmp	r3, #8
 800228c:	d104      	bne.n	8002298 <HAL_TIM_PWM_Stop+0x68>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002296:	e003      	b.n	80022a0 <HAL_TIM_PWM_Stop+0x70>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01b      	beq.n	800230e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f06f 0202 	mvn.w	r2, #2
 80022de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fa40 	bl	800277a <HAL_TIM_IC_CaptureCallback>
 80022fa:	e005      	b.n	8002308 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fa33 	bl	8002768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fa42 	bl	800278c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01b      	beq.n	800235a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 0204 	mvn.w	r2, #4
 800232a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fa1a 	bl	800277a <HAL_TIM_IC_CaptureCallback>
 8002346:	e005      	b.n	8002354 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fa0d 	bl	8002768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fa1c 	bl	800278c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01b      	beq.n	80023a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f06f 0208 	mvn.w	r2, #8
 8002376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2204      	movs	r2, #4
 800237c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f9f4 	bl	800277a <HAL_TIM_IC_CaptureCallback>
 8002392:	e005      	b.n	80023a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f9e7 	bl	8002768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f9f6 	bl	800278c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01b      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f06f 0210 	mvn.w	r2, #16
 80023c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2208      	movs	r2, #8
 80023c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f9ce 	bl	800277a <HAL_TIM_IC_CaptureCallback>
 80023de:	e005      	b.n	80023ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f9c1 	bl	8002768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f9d0 	bl	800278c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0201 	mvn.w	r2, #1
 800240e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f9a0 	bl	8002756 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00c      	beq.n	800243a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f9b2 	bl	800279e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800245e:	2302      	movs	r3, #2
 8002460:	e0ae      	b.n	80025c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	f200 809f 	bhi.w	80025b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002472:	a201      	add	r2, pc, #4	@ (adr r2, 8002478 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002478:	080024ad 	.word	0x080024ad
 800247c:	080025b1 	.word	0x080025b1
 8002480:	080025b1 	.word	0x080025b1
 8002484:	080025b1 	.word	0x080025b1
 8002488:	080024ed 	.word	0x080024ed
 800248c:	080025b1 	.word	0x080025b1
 8002490:	080025b1 	.word	0x080025b1
 8002494:	080025b1 	.word	0x080025b1
 8002498:	0800252f 	.word	0x0800252f
 800249c:	080025b1 	.word	0x080025b1
 80024a0:	080025b1 	.word	0x080025b1
 80024a4:	080025b1 	.word	0x080025b1
 80024a8:	0800256f 	.word	0x0800256f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f9f2 	bl	800289c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0208 	orr.w	r2, r2, #8
 80024c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6999      	ldr	r1, [r3, #24]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	619a      	str	r2, [r3, #24]
      break;
 80024ea:	e064      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fa0e 	bl	8002914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6999      	ldr	r1, [r3, #24]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	021a      	lsls	r2, r3, #8
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	619a      	str	r2, [r3, #24]
      break;
 800252c:	e043      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fa2b 	bl	8002990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0208 	orr.w	r2, r2, #8
 8002548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0204 	bic.w	r2, r2, #4
 8002558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69d9      	ldr	r1, [r3, #28]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	61da      	str	r2, [r3, #28]
      break;
 800256c:	e023      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fa48 	bl	8002a0a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69d9      	ldr	r1, [r3, #28]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	021a      	lsls	r2, r3, #8
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	61da      	str	r2, [r3, #28]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	75fb      	strb	r3, [r7, #23]
      break;
 80025b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80025be:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_TIM_ConfigClockSource+0x1c>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0b4      	b.n	800274e <HAL_TIM_ConfigClockSource+0x186>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800260a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800261c:	d03e      	beq.n	800269c <HAL_TIM_ConfigClockSource+0xd4>
 800261e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002622:	f200 8087 	bhi.w	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800262a:	f000 8086 	beq.w	800273a <HAL_TIM_ConfigClockSource+0x172>
 800262e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002632:	d87f      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002634:	2b70      	cmp	r3, #112	@ 0x70
 8002636:	d01a      	beq.n	800266e <HAL_TIM_ConfigClockSource+0xa6>
 8002638:	2b70      	cmp	r3, #112	@ 0x70
 800263a:	d87b      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 800263c:	2b60      	cmp	r3, #96	@ 0x60
 800263e:	d050      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002640:	2b60      	cmp	r3, #96	@ 0x60
 8002642:	d877      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002644:	2b50      	cmp	r3, #80	@ 0x50
 8002646:	d03c      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002648:	2b50      	cmp	r3, #80	@ 0x50
 800264a:	d873      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d058      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x13a>
 8002650:	2b40      	cmp	r3, #64	@ 0x40
 8002652:	d86f      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002654:	2b30      	cmp	r3, #48	@ 0x30
 8002656:	d064      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x15a>
 8002658:	2b30      	cmp	r3, #48	@ 0x30
 800265a:	d86b      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d060      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x15a>
 8002660:	2b20      	cmp	r3, #32
 8002662:	d867      	bhi.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05c      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x15a>
 8002668:	2b10      	cmp	r3, #16
 800266a:	d05a      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x15a>
 800266c:	e062      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800267e:	f000 fa79 	bl	8002b74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	609a      	str	r2, [r3, #8]
      break;
 800269a:	e04f      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026ac:	f000 fa62 	bl	8002b74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026be:	609a      	str	r2, [r3, #8]
      break;
 80026c0:	e03c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 f9d9 	bl	8002a86 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2150      	movs	r1, #80	@ 0x50
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fa30 	bl	8002b40 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e02c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f9f7 	bl	8002ae2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2160      	movs	r1, #96	@ 0x60
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fa20 	bl	8002b40 <TIM_ITRx_SetConfig>
      break;
 8002700:	e01c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	461a      	mov	r2, r3
 8002710:	f000 f9b9 	bl	8002a86 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2140      	movs	r1, #64	@ 0x40
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fa10 	bl	8002b40 <TIM_ITRx_SetConfig>
      break;
 8002720:	e00c      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f000 fa07 	bl	8002b40 <TIM_ITRx_SetConfig>
      break;
 8002732:	e003      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      break;
 8002738:	e000      	b.n	800273c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800273a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c6:	d00f      	beq.n	80027e8 <TIM_Base_SetConfig+0x38>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002884 <TIM_Base_SetConfig+0xd4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00b      	beq.n	80027e8 <TIM_Base_SetConfig+0x38>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <TIM_Base_SetConfig+0xd8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <TIM_Base_SetConfig+0x38>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a2c      	ldr	r2, [pc, #176]	@ (800288c <TIM_Base_SetConfig+0xdc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <TIM_Base_SetConfig+0x38>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <TIM_Base_SetConfig+0xe0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d108      	bne.n	80027fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002800:	d017      	beq.n	8002832 <TIM_Base_SetConfig+0x82>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <TIM_Base_SetConfig+0xd4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <TIM_Base_SetConfig+0x82>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1e      	ldr	r2, [pc, #120]	@ (8002888 <TIM_Base_SetConfig+0xd8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00f      	beq.n	8002832 <TIM_Base_SetConfig+0x82>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1d      	ldr	r2, [pc, #116]	@ (800288c <TIM_Base_SetConfig+0xdc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00b      	beq.n	8002832 <TIM_Base_SetConfig+0x82>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1c      	ldr	r2, [pc, #112]	@ (8002890 <TIM_Base_SetConfig+0xe0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <TIM_Base_SetConfig+0x82>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1b      	ldr	r2, [pc, #108]	@ (8002894 <TIM_Base_SetConfig+0xe4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d003      	beq.n	8002832 <TIM_Base_SetConfig+0x82>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1a      	ldr	r2, [pc, #104]	@ (8002898 <TIM_Base_SetConfig+0xe8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d108      	bne.n	8002844 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00
 8002890:	40010800 	.word	0x40010800
 8002894:	40010c00 	.word	0x40010c00
 8002898:	40011000 	.word	0x40011000

0800289c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f023 0201 	bic.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 0302 	bic.w	r3, r3, #2
 80028e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f023 0210 	bic.w	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0320 	bic.w	r3, r3, #32
 800295e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	621a      	str	r2, [r3, #32]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	621a      	str	r2, [r3, #32]
}
 8002a00:	bf00      	nop
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	031b      	lsls	r3, r3, #12
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	621a      	str	r2, [r3, #32]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b087      	sub	sp, #28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f023 0201 	bic.w	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 030a 	bic.w	r3, r3, #10
 8002ac2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	621a      	str	r2, [r3, #32]
}
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b087      	sub	sp, #28
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f023 0210 	bic.w	r2, r3, #16
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	031b      	lsls	r3, r3, #12
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f043 0307 	orr.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	609a      	str	r2, [r3, #8]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	021a      	lsls	r2, r3, #8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	621a      	str	r2, [r3, #32]
}
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e046      	b.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c56:	d00e      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a10      	ldr	r2, [pc, #64]	@ (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10c      	bne.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800
 8002cb4:	40010800 	.word	0x40010800

08002cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e042      	b.n	8002d50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fd fec8 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	@ 0x24
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fd77 	bl	80037f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	@ 0x28
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d175      	bne.n	8002e64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_UART_Transmit+0x2c>
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e06e      	b.n	8002e66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2221      	movs	r2, #33	@ 0x21
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d96:	f7fd ffbf 	bl	8000d18 <HAL_GetTick>
 8002d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db0:	d108      	bne.n	8002dc4 <HAL_UART_Transmit+0x6c>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e003      	b.n	8002dcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dcc:	e02e      	b.n	8002e2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	@ 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fb17 	bl	800340c <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e03a      	b.n	8002e66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e007      	b.n	8002e1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1cb      	bne.n	8002dce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2140      	movs	r1, #64	@ 0x40
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fae3 	bl	800340c <UART_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e006      	b.n	8002e66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b0ba      	sub	sp, #232	@ 0xe8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x66>
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fbcf 	bl	8003672 <UART_Receive_IT>
      return;
 8002ed4:	e271      	b.n	80033ba <HAL_UART_IRQHandler+0x54a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80de 	beq.w	800309c <HAL_UART_IRQHandler+0x22c>
 8002ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80d1 	beq.w	800309c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_UART_IRQHandler+0xae>
 8002f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_UART_IRQHandler+0xd2>
 8002f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_UART_IRQHandler+0xf6>
 8002f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d011      	beq.n	8002f96 <HAL_UART_IRQHandler+0x126>
 8002f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	f043 0208 	orr.w	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8208 	beq.w	80033b0 <HAL_UART_IRQHandler+0x540>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_UART_IRQHandler+0x14e>
 8002fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fb5a 	bl	8003672 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc8:	2b40      	cmp	r3, #64	@ 0x40
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_UART_IRQHandler+0x17a>
 8002fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d04f      	beq.n	800308a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa67 	bl	80034be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b40      	cmp	r3, #64	@ 0x40
 8002ffc:	d141      	bne.n	8003082 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3314      	adds	r3, #20
 8003026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800302a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800302e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1d9      	bne.n	8002ffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d013      	beq.n	800307a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	4a89      	ldr	r2, [pc, #548]	@ (800327c <HAL_UART_IRQHandler+0x40c>)
 8003058:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd ffd0 	bl	8001004 <HAL_DMA_Abort_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003074:	4610      	mov	r0, r2
 8003076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	e00e      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f9b2 	bl	80033e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	e00a      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9ae 	bl	80033e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e006      	b.n	8003098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f9aa 	bl	80033e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003096:	e18b      	b.n	80033b0 <HAL_UART_IRQHandler+0x540>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003098:	bf00      	nop
    return;
 800309a:	e189      	b.n	80033b0 <HAL_UART_IRQHandler+0x540>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	f040 8165 	bne.w	8003370 <HAL_UART_IRQHandler+0x500>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 815e 	beq.w	8003370 <HAL_UART_IRQHandler+0x500>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8157 	beq.w	8003370 <HAL_UART_IRQHandler+0x500>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e2:	2b40      	cmp	r3, #64	@ 0x40
 80030e4:	f040 80cc 	bne.w	8003280 <HAL_UART_IRQHandler+0x410>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a8 	beq.w	800324e <HAL_UART_IRQHandler+0x3de>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003106:	429a      	cmp	r2, r3
 8003108:	f080 80a1 	bcs.w	800324e <HAL_UART_IRQHandler+0x3de>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003112:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b20      	cmp	r3, #32
 800311c:	f000 8088 	beq.w	8003230 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003136:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800313a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800313e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800314c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003158:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1d9      	bne.n	8003120 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800317c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3314      	adds	r3, #20
 800318c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003190:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003194:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003198:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800319c:	e841 2300 	strex	r3, r2, [r1]
 80031a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e1      	bne.n	800316c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3314      	adds	r3, #20
 80031ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e3      	bne.n	80031a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003212:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003214:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e3      	bne.n	80031ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fead 	bl	8000f8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800323e:	b29b      	uxth	r3, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8d5 	bl	80033f6 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800324c:	e0b2      	b.n	80033b4 <HAL_UART_IRQHandler+0x544>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003256:	429a      	cmp	r2, r3
 8003258:	f040 80ac 	bne.w	80033b4 <HAL_UART_IRQHandler+0x544>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 80a6 	bne.w	80033b4 <HAL_UART_IRQHandler+0x544>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8be 	bl	80033f6 <HAL_UARTEx_RxEventCallback>
      return;
 800327a:	e09b      	b.n	80033b4 <HAL_UART_IRQHandler+0x544>
 800327c:	08003583 	.word	0x08003583
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 808e 	beq.w	80033b8 <HAL_UART_IRQHandler+0x548>
          && (nb_rx_data > 0U))
 800329c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8089 	beq.w	80033b8 <HAL_UART_IRQHandler+0x548>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	330c      	adds	r3, #12
 80032ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80032cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e3      	bne.n	80032a6 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3314      	adds	r3, #20
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	623b      	str	r3, [r7, #32]
   return(result);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3314      	adds	r3, #20
 80032fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003302:	633a      	str	r2, [r7, #48]	@ 0x30
 8003304:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e3      	bne.n	80032de <HAL_UART_IRQHandler+0x46e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	60fb      	str	r3, [r7, #12]
   return(result);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003348:	61fa      	str	r2, [r7, #28]
 800334a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	617b      	str	r3, [r7, #20]
   return(result);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e3      	bne.n	8003324 <HAL_UART_IRQHandler+0x4b4>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f844 	bl	80033f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800336e:	e023      	b.n	80033b8 <HAL_UART_IRQHandler+0x548>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_UART_IRQHandler+0x520>
 800337c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_UART_IRQHandler+0x520>
  {
    UART_Transmit_IT(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f90b 	bl	80035a4 <UART_Transmit_IT>
    return;
 800338e:	e014      	b.n	80033ba <HAL_UART_IRQHandler+0x54a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <HAL_UART_IRQHandler+0x54a>
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_UART_IRQHandler+0x54a>
  {
    UART_EndTransmit_IT(huart);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f94a 	bl	8003642 <UART_EndTransmit_IT>
    return;
 80033ae:	e004      	b.n	80033ba <HAL_UART_IRQHandler+0x54a>
    return;
 80033b0:	bf00      	nop
 80033b2:	e002      	b.n	80033ba <HAL_UART_IRQHandler+0x54a>
      return;
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <HAL_UART_IRQHandler+0x54a>
      return;
 80033b8:	bf00      	nop
  }
}
 80033ba:	37e8      	adds	r7, #232	@ 0xe8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341c:	e03b      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d037      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fd fc77 	bl	8000d18 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <UART_WaitOnFlagUntilTimeout+0x30>
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e03a      	b.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d023      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b80      	cmp	r3, #128	@ 0x80
 8003452:	d020      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b40      	cmp	r3, #64	@ 0x40
 8003458:	d01d      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d116      	bne.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f81d 	bl	80034be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2208      	movs	r2, #8
 8003488:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d0b4      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034be:	b480      	push	{r7}
 80034c0:	b095      	sub	sp, #84	@ 0x54
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80034e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	61fb      	str	r3, [r7, #28]
   return(result);
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3314      	adds	r3, #20
 8003518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800351a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e5      	bne.n	80034fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	2b01      	cmp	r3, #1
 8003534:	d119      	bne.n	800356a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	60bb      	str	r3, [r7, #8]
   return(result);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f023 0310 	bic.w	r3, r3, #16
 800354c:	647b      	str	r3, [r7, #68]	@ 0x44
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	330c      	adds	r3, #12
 8003554:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003556:	61ba      	str	r2, [r7, #24]
 8003558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	613b      	str	r3, [r7, #16]
   return(result);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e5      	bne.n	8003536 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003578:	bf00      	nop
 800357a:	3754      	adds	r7, #84	@ 0x54
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff ff24 	bl	80033e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b21      	cmp	r3, #33	@ 0x21
 80035b6:	d13e      	bne.n	8003636 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c0:	d114      	bne.n	80035ec <UART_Transmit_IT+0x48>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d110      	bne.n	80035ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]
 80035ea:	e008      	b.n	80035fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	1c59      	adds	r1, r3, #1
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6211      	str	r1, [r2, #32]
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29b      	uxth	r3, r3
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4619      	mov	r1, r3
 800360c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003620:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003630:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003658:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff feac 	bl	80033c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b08c      	sub	sp, #48	@ 0x30
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800367e:	2300      	movs	r3, #0
 8003680:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b22      	cmp	r3, #34	@ 0x22
 800368c:	f040 80aa 	bne.w	80037e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003698:	d115      	bne.n	80036c6 <UART_Receive_IT+0x54>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d111      	bne.n	80036c6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036be:	1c9a      	adds	r2, r3, #2
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80036c4:	e024      	b.n	8003710 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d4:	d007      	beq.n	80036e6 <UART_Receive_IT+0x74>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <UART_Receive_IT+0x82>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	e008      	b.n	8003706 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003700:	b2da      	uxtb	r2, r3
 8003702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003704:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29b      	uxth	r3, r3
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4619      	mov	r1, r3
 800371e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003720:	2b00      	cmp	r3, #0
 8003722:	d15d      	bne.n	80037e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0220 	bic.w	r2, r2, #32
 8003732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	2b01      	cmp	r3, #1
 8003768:	d135      	bne.n	80037d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	613b      	str	r3, [r7, #16]
   return(result);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f023 0310 	bic.w	r3, r3, #16
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003790:	623a      	str	r2, [r7, #32]
 8003792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	69f9      	ldr	r1, [r7, #28]
 8003796:	6a3a      	ldr	r2, [r7, #32]
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	61bb      	str	r3, [r7, #24]
   return(result);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d10a      	bne.n	80037c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fe11 	bl	80033f6 <HAL_UARTEx_RxEventCallback>
 80037d4:	e002      	b.n	80037dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fdfb 	bl	80033d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e002      	b.n	80037e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3730      	adds	r7, #48	@ 0x30
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	4313      	orrs	r3, r2
 8003824:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003830:	f023 030c 	bic.w	r3, r3, #12
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	430b      	orrs	r3, r1
 800383c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a55      	ldr	r2, [pc, #340]	@ (80039b0 <UART_SetConfig+0x1c0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d103      	bne.n	8003866 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800385e:	f7fe fb55 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	e002      	b.n	800386c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003866:	f7fe fb3d 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 800386a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003874:	d14c      	bne.n	8003910 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009a      	lsls	r2, r3, #2
 8003880:	441a      	add	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	4a49      	ldr	r2, [pc, #292]	@ (80039b4 <UART_SetConfig+0x1c4>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	0119      	lsls	r1, r3, #4
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	009a      	lsls	r2, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ac:	4b41      	ldr	r3, [pc, #260]	@ (80039b4 <UART_SetConfig+0x1c4>)
 80038ae:	fba3 0302 	umull	r0, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2064      	movs	r0, #100	@ 0x64
 80038b6:	fb00 f303 	mul.w	r3, r0, r3
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	3332      	adds	r3, #50	@ 0x32
 80038c0:	4a3c      	ldr	r2, [pc, #240]	@ (80039b4 <UART_SetConfig+0x1c4>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038ce:	4419      	add	r1, r3
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009a      	lsls	r2, r3, #2
 80038da:	441a      	add	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e6:	4b33      	ldr	r3, [pc, #204]	@ (80039b4 <UART_SetConfig+0x1c4>)
 80038e8:	fba3 0302 	umull	r0, r3, r3, r2
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	2064      	movs	r0, #100	@ 0x64
 80038f0:	fb00 f303 	mul.w	r3, r0, r3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	3332      	adds	r3, #50	@ 0x32
 80038fa:	4a2e      	ldr	r2, [pc, #184]	@ (80039b4 <UART_SetConfig+0x1c4>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	f003 0207 	and.w	r2, r3, #7
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	440a      	add	r2, r1
 800390c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800390e:	e04a      	b.n	80039a6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009a      	lsls	r2, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	4a23      	ldr	r2, [pc, #140]	@ (80039b4 <UART_SetConfig+0x1c4>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	0119      	lsls	r1, r3, #4
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	fbb2 f2f3 	udiv	r2, r2, r3
 8003946:	4b1b      	ldr	r3, [pc, #108]	@ (80039b4 <UART_SetConfig+0x1c4>)
 8003948:	fba3 0302 	umull	r0, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2064      	movs	r0, #100	@ 0x64
 8003950:	fb00 f303 	mul.w	r3, r0, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	3332      	adds	r3, #50	@ 0x32
 800395a:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <UART_SetConfig+0x1c4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003966:	4419      	add	r1, r3
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009a      	lsls	r2, r3, #2
 8003972:	441a      	add	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	fbb2 f2f3 	udiv	r2, r2, r3
 800397e:	4b0d      	ldr	r3, [pc, #52]	@ (80039b4 <UART_SetConfig+0x1c4>)
 8003980:	fba3 0302 	umull	r0, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2064      	movs	r0, #100	@ 0x64
 8003988:	fb00 f303 	mul.w	r3, r0, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	3332      	adds	r3, #50	@ 0x32
 8003992:	4a08      	ldr	r2, [pc, #32]	@ (80039b4 <UART_SetConfig+0x1c4>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	f003 020f 	and.w	r2, r3, #15
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	440a      	add	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40013800 	.word	0x40013800
 80039b4:	51eb851f 	.word	0x51eb851f

080039b8 <siprintf>:
 80039b8:	b40e      	push	{r1, r2, r3}
 80039ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039be:	b500      	push	{lr}
 80039c0:	b09c      	sub	sp, #112	@ 0x70
 80039c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80039c4:	9002      	str	r0, [sp, #8]
 80039c6:	9006      	str	r0, [sp, #24]
 80039c8:	9107      	str	r1, [sp, #28]
 80039ca:	9104      	str	r1, [sp, #16]
 80039cc:	4808      	ldr	r0, [pc, #32]	@ (80039f0 <siprintf+0x38>)
 80039ce:	4909      	ldr	r1, [pc, #36]	@ (80039f4 <siprintf+0x3c>)
 80039d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80039d4:	9105      	str	r1, [sp, #20]
 80039d6:	6800      	ldr	r0, [r0, #0]
 80039d8:	a902      	add	r1, sp, #8
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	f000 f992 	bl	8003d04 <_svfiprintf_r>
 80039e0:	2200      	movs	r2, #0
 80039e2:	9b02      	ldr	r3, [sp, #8]
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	b01c      	add	sp, #112	@ 0x70
 80039e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039ec:	b003      	add	sp, #12
 80039ee:	4770      	bx	lr
 80039f0:	2000000c 	.word	0x2000000c
 80039f4:	ffff0208 	.word	0xffff0208

080039f8 <memset>:
 80039f8:	4603      	mov	r3, r0
 80039fa:	4402      	add	r2, r0
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d100      	bne.n	8003a02 <memset+0xa>
 8003a00:	4770      	bx	lr
 8003a02:	f803 1b01 	strb.w	r1, [r3], #1
 8003a06:	e7f9      	b.n	80039fc <memset+0x4>

08003a08 <__errno>:
 8003a08:	4b01      	ldr	r3, [pc, #4]	@ (8003a10 <__errno+0x8>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2000000c 	.word	0x2000000c

08003a14 <__libc_init_array>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	2600      	movs	r6, #0
 8003a18:	4d0c      	ldr	r5, [pc, #48]	@ (8003a4c <__libc_init_array+0x38>)
 8003a1a:	4c0d      	ldr	r4, [pc, #52]	@ (8003a50 <__libc_init_array+0x3c>)
 8003a1c:	1b64      	subs	r4, r4, r5
 8003a1e:	10a4      	asrs	r4, r4, #2
 8003a20:	42a6      	cmp	r6, r4
 8003a22:	d109      	bne.n	8003a38 <__libc_init_array+0x24>
 8003a24:	f000 fc78 	bl	8004318 <_init>
 8003a28:	2600      	movs	r6, #0
 8003a2a:	4d0a      	ldr	r5, [pc, #40]	@ (8003a54 <__libc_init_array+0x40>)
 8003a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a58 <__libc_init_array+0x44>)
 8003a2e:	1b64      	subs	r4, r4, r5
 8003a30:	10a4      	asrs	r4, r4, #2
 8003a32:	42a6      	cmp	r6, r4
 8003a34:	d105      	bne.n	8003a42 <__libc_init_array+0x2e>
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3c:	4798      	blx	r3
 8003a3e:	3601      	adds	r6, #1
 8003a40:	e7ee      	b.n	8003a20 <__libc_init_array+0xc>
 8003a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a46:	4798      	blx	r3
 8003a48:	3601      	adds	r6, #1
 8003a4a:	e7f2      	b.n	8003a32 <__libc_init_array+0x1e>
 8003a4c:	080043ac 	.word	0x080043ac
 8003a50:	080043ac 	.word	0x080043ac
 8003a54:	080043ac 	.word	0x080043ac
 8003a58:	080043b0 	.word	0x080043b0

08003a5c <__retarget_lock_acquire_recursive>:
 8003a5c:	4770      	bx	lr

08003a5e <__retarget_lock_release_recursive>:
 8003a5e:	4770      	bx	lr

08003a60 <_free_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4605      	mov	r5, r0
 8003a64:	2900      	cmp	r1, #0
 8003a66:	d040      	beq.n	8003aea <_free_r+0x8a>
 8003a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a6c:	1f0c      	subs	r4, r1, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfb8      	it	lt
 8003a72:	18e4      	addlt	r4, r4, r3
 8003a74:	f000 f8de 	bl	8003c34 <__malloc_lock>
 8003a78:	4a1c      	ldr	r2, [pc, #112]	@ (8003aec <_free_r+0x8c>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	b933      	cbnz	r3, 8003a8c <_free_r+0x2c>
 8003a7e:	6063      	str	r3, [r4, #4]
 8003a80:	6014      	str	r4, [r2, #0]
 8003a82:	4628      	mov	r0, r5
 8003a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a88:	f000 b8da 	b.w	8003c40 <__malloc_unlock>
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d908      	bls.n	8003aa2 <_free_r+0x42>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	1821      	adds	r1, r4, r0
 8003a94:	428b      	cmp	r3, r1
 8003a96:	bf01      	itttt	eq
 8003a98:	6819      	ldreq	r1, [r3, #0]
 8003a9a:	685b      	ldreq	r3, [r3, #4]
 8003a9c:	1809      	addeq	r1, r1, r0
 8003a9e:	6021      	streq	r1, [r4, #0]
 8003aa0:	e7ed      	b.n	8003a7e <_free_r+0x1e>
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b10b      	cbz	r3, 8003aac <_free_r+0x4c>
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d9fa      	bls.n	8003aa2 <_free_r+0x42>
 8003aac:	6811      	ldr	r1, [r2, #0]
 8003aae:	1850      	adds	r0, r2, r1
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d10b      	bne.n	8003acc <_free_r+0x6c>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	4401      	add	r1, r0
 8003ab8:	1850      	adds	r0, r2, r1
 8003aba:	4283      	cmp	r3, r0
 8003abc:	6011      	str	r1, [r2, #0]
 8003abe:	d1e0      	bne.n	8003a82 <_free_r+0x22>
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4408      	add	r0, r1
 8003ac6:	6010      	str	r0, [r2, #0]
 8003ac8:	6053      	str	r3, [r2, #4]
 8003aca:	e7da      	b.n	8003a82 <_free_r+0x22>
 8003acc:	d902      	bls.n	8003ad4 <_free_r+0x74>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	602b      	str	r3, [r5, #0]
 8003ad2:	e7d6      	b.n	8003a82 <_free_r+0x22>
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	1821      	adds	r1, r4, r0
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	bf01      	itttt	eq
 8003adc:	6819      	ldreq	r1, [r3, #0]
 8003ade:	685b      	ldreq	r3, [r3, #4]
 8003ae0:	1809      	addeq	r1, r1, r0
 8003ae2:	6021      	streq	r1, [r4, #0]
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	6054      	str	r4, [r2, #4]
 8003ae8:	e7cb      	b.n	8003a82 <_free_r+0x22>
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	2000024c 	.word	0x2000024c

08003af0 <sbrk_aligned>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	4e0f      	ldr	r6, [pc, #60]	@ (8003b30 <sbrk_aligned+0x40>)
 8003af4:	460c      	mov	r4, r1
 8003af6:	6831      	ldr	r1, [r6, #0]
 8003af8:	4605      	mov	r5, r0
 8003afa:	b911      	cbnz	r1, 8003b02 <sbrk_aligned+0x12>
 8003afc:	f000 fbaa 	bl	8004254 <_sbrk_r>
 8003b00:	6030      	str	r0, [r6, #0]
 8003b02:	4621      	mov	r1, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 fba5 	bl	8004254 <_sbrk_r>
 8003b0a:	1c43      	adds	r3, r0, #1
 8003b0c:	d103      	bne.n	8003b16 <sbrk_aligned+0x26>
 8003b0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003b12:	4620      	mov	r0, r4
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
 8003b16:	1cc4      	adds	r4, r0, #3
 8003b18:	f024 0403 	bic.w	r4, r4, #3
 8003b1c:	42a0      	cmp	r0, r4
 8003b1e:	d0f8      	beq.n	8003b12 <sbrk_aligned+0x22>
 8003b20:	1a21      	subs	r1, r4, r0
 8003b22:	4628      	mov	r0, r5
 8003b24:	f000 fb96 	bl	8004254 <_sbrk_r>
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d1f2      	bne.n	8003b12 <sbrk_aligned+0x22>
 8003b2c:	e7ef      	b.n	8003b0e <sbrk_aligned+0x1e>
 8003b2e:	bf00      	nop
 8003b30:	20000248 	.word	0x20000248

08003b34 <_malloc_r>:
 8003b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b38:	1ccd      	adds	r5, r1, #3
 8003b3a:	f025 0503 	bic.w	r5, r5, #3
 8003b3e:	3508      	adds	r5, #8
 8003b40:	2d0c      	cmp	r5, #12
 8003b42:	bf38      	it	cc
 8003b44:	250c      	movcc	r5, #12
 8003b46:	2d00      	cmp	r5, #0
 8003b48:	4606      	mov	r6, r0
 8003b4a:	db01      	blt.n	8003b50 <_malloc_r+0x1c>
 8003b4c:	42a9      	cmp	r1, r5
 8003b4e:	d904      	bls.n	8003b5a <_malloc_r+0x26>
 8003b50:	230c      	movs	r3, #12
 8003b52:	6033      	str	r3, [r6, #0]
 8003b54:	2000      	movs	r0, #0
 8003b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c30 <_malloc_r+0xfc>
 8003b5e:	f000 f869 	bl	8003c34 <__malloc_lock>
 8003b62:	f8d8 3000 	ldr.w	r3, [r8]
 8003b66:	461c      	mov	r4, r3
 8003b68:	bb44      	cbnz	r4, 8003bbc <_malloc_r+0x88>
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f7ff ffbf 	bl	8003af0 <sbrk_aligned>
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	4604      	mov	r4, r0
 8003b76:	d158      	bne.n	8003c2a <_malloc_r+0xf6>
 8003b78:	f8d8 4000 	ldr.w	r4, [r8]
 8003b7c:	4627      	mov	r7, r4
 8003b7e:	2f00      	cmp	r7, #0
 8003b80:	d143      	bne.n	8003c0a <_malloc_r+0xd6>
 8003b82:	2c00      	cmp	r4, #0
 8003b84:	d04b      	beq.n	8003c1e <_malloc_r+0xea>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	4639      	mov	r1, r7
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	eb04 0903 	add.w	r9, r4, r3
 8003b90:	f000 fb60 	bl	8004254 <_sbrk_r>
 8003b94:	4581      	cmp	r9, r0
 8003b96:	d142      	bne.n	8003c1e <_malloc_r+0xea>
 8003b98:	6821      	ldr	r1, [r4, #0]
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	1a6d      	subs	r5, r5, r1
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	f7ff ffa6 	bl	8003af0 <sbrk_aligned>
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	d03a      	beq.n	8003c1e <_malloc_r+0xea>
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	442b      	add	r3, r5
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	bb62      	cbnz	r2, 8003c10 <_malloc_r+0xdc>
 8003bb6:	f8c8 7000 	str.w	r7, [r8]
 8003bba:	e00f      	b.n	8003bdc <_malloc_r+0xa8>
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	1b52      	subs	r2, r2, r5
 8003bc0:	d420      	bmi.n	8003c04 <_malloc_r+0xd0>
 8003bc2:	2a0b      	cmp	r2, #11
 8003bc4:	d917      	bls.n	8003bf6 <_malloc_r+0xc2>
 8003bc6:	1961      	adds	r1, r4, r5
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	6025      	str	r5, [r4, #0]
 8003bcc:	bf18      	it	ne
 8003bce:	6059      	strne	r1, [r3, #4]
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	bf08      	it	eq
 8003bd4:	f8c8 1000 	streq.w	r1, [r8]
 8003bd8:	5162      	str	r2, [r4, r5]
 8003bda:	604b      	str	r3, [r1, #4]
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f000 f82f 	bl	8003c40 <__malloc_unlock>
 8003be2:	f104 000b 	add.w	r0, r4, #11
 8003be6:	1d23      	adds	r3, r4, #4
 8003be8:	f020 0007 	bic.w	r0, r0, #7
 8003bec:	1ac2      	subs	r2, r0, r3
 8003bee:	bf1c      	itt	ne
 8003bf0:	1a1b      	subne	r3, r3, r0
 8003bf2:	50a3      	strne	r3, [r4, r2]
 8003bf4:	e7af      	b.n	8003b56 <_malloc_r+0x22>
 8003bf6:	6862      	ldr	r2, [r4, #4]
 8003bf8:	42a3      	cmp	r3, r4
 8003bfa:	bf0c      	ite	eq
 8003bfc:	f8c8 2000 	streq.w	r2, [r8]
 8003c00:	605a      	strne	r2, [r3, #4]
 8003c02:	e7eb      	b.n	8003bdc <_malloc_r+0xa8>
 8003c04:	4623      	mov	r3, r4
 8003c06:	6864      	ldr	r4, [r4, #4]
 8003c08:	e7ae      	b.n	8003b68 <_malloc_r+0x34>
 8003c0a:	463c      	mov	r4, r7
 8003c0c:	687f      	ldr	r7, [r7, #4]
 8003c0e:	e7b6      	b.n	8003b7e <_malloc_r+0x4a>
 8003c10:	461a      	mov	r2, r3
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	d1fb      	bne.n	8003c10 <_malloc_r+0xdc>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6053      	str	r3, [r2, #4]
 8003c1c:	e7de      	b.n	8003bdc <_malloc_r+0xa8>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	4630      	mov	r0, r6
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	f000 f80c 	bl	8003c40 <__malloc_unlock>
 8003c28:	e794      	b.n	8003b54 <_malloc_r+0x20>
 8003c2a:	6005      	str	r5, [r0, #0]
 8003c2c:	e7d6      	b.n	8003bdc <_malloc_r+0xa8>
 8003c2e:	bf00      	nop
 8003c30:	2000024c 	.word	0x2000024c

08003c34 <__malloc_lock>:
 8003c34:	4801      	ldr	r0, [pc, #4]	@ (8003c3c <__malloc_lock+0x8>)
 8003c36:	f7ff bf11 	b.w	8003a5c <__retarget_lock_acquire_recursive>
 8003c3a:	bf00      	nop
 8003c3c:	20000244 	.word	0x20000244

08003c40 <__malloc_unlock>:
 8003c40:	4801      	ldr	r0, [pc, #4]	@ (8003c48 <__malloc_unlock+0x8>)
 8003c42:	f7ff bf0c 	b.w	8003a5e <__retarget_lock_release_recursive>
 8003c46:	bf00      	nop
 8003c48:	20000244 	.word	0x20000244

08003c4c <__ssputs_r>:
 8003c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	461f      	mov	r7, r3
 8003c52:	688e      	ldr	r6, [r1, #8]
 8003c54:	4682      	mov	sl, r0
 8003c56:	42be      	cmp	r6, r7
 8003c58:	460c      	mov	r4, r1
 8003c5a:	4690      	mov	r8, r2
 8003c5c:	680b      	ldr	r3, [r1, #0]
 8003c5e:	d82d      	bhi.n	8003cbc <__ssputs_r+0x70>
 8003c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c68:	d026      	beq.n	8003cb8 <__ssputs_r+0x6c>
 8003c6a:	6965      	ldr	r5, [r4, #20]
 8003c6c:	6909      	ldr	r1, [r1, #16]
 8003c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c72:	eba3 0901 	sub.w	r9, r3, r1
 8003c76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c7a:	1c7b      	adds	r3, r7, #1
 8003c7c:	444b      	add	r3, r9
 8003c7e:	106d      	asrs	r5, r5, #1
 8003c80:	429d      	cmp	r5, r3
 8003c82:	bf38      	it	cc
 8003c84:	461d      	movcc	r5, r3
 8003c86:	0553      	lsls	r3, r2, #21
 8003c88:	d527      	bpl.n	8003cda <__ssputs_r+0x8e>
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	f7ff ff52 	bl	8003b34 <_malloc_r>
 8003c90:	4606      	mov	r6, r0
 8003c92:	b360      	cbz	r0, 8003cee <__ssputs_r+0xa2>
 8003c94:	464a      	mov	r2, r9
 8003c96:	6921      	ldr	r1, [r4, #16]
 8003c98:	f000 fafa 	bl	8004290 <memcpy>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	6126      	str	r6, [r4, #16]
 8003caa:	444e      	add	r6, r9
 8003cac:	6026      	str	r6, [r4, #0]
 8003cae:	463e      	mov	r6, r7
 8003cb0:	6165      	str	r5, [r4, #20]
 8003cb2:	eba5 0509 	sub.w	r5, r5, r9
 8003cb6:	60a5      	str	r5, [r4, #8]
 8003cb8:	42be      	cmp	r6, r7
 8003cba:	d900      	bls.n	8003cbe <__ssputs_r+0x72>
 8003cbc:	463e      	mov	r6, r7
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	6820      	ldr	r0, [r4, #0]
 8003cc4:	f000 faac 	bl	8004220 <memmove>
 8003cc8:	2000      	movs	r0, #0
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	1b9b      	subs	r3, r3, r6
 8003cce:	60a3      	str	r3, [r4, #8]
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	4433      	add	r3, r6
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cda:	462a      	mov	r2, r5
 8003cdc:	f000 fae6 	bl	80042ac <_realloc_r>
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d1e0      	bne.n	8003ca8 <__ssputs_r+0x5c>
 8003ce6:	4650      	mov	r0, sl
 8003ce8:	6921      	ldr	r1, [r4, #16]
 8003cea:	f7ff feb9 	bl	8003a60 <_free_r>
 8003cee:	230c      	movs	r3, #12
 8003cf0:	f8ca 3000 	str.w	r3, [sl]
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	e7e9      	b.n	8003cd6 <__ssputs_r+0x8a>
	...

08003d04 <_svfiprintf_r>:
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	4698      	mov	r8, r3
 8003d0a:	898b      	ldrh	r3, [r1, #12]
 8003d0c:	4607      	mov	r7, r0
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	460d      	mov	r5, r1
 8003d12:	4614      	mov	r4, r2
 8003d14:	b09d      	sub	sp, #116	@ 0x74
 8003d16:	d510      	bpl.n	8003d3a <_svfiprintf_r+0x36>
 8003d18:	690b      	ldr	r3, [r1, #16]
 8003d1a:	b973      	cbnz	r3, 8003d3a <_svfiprintf_r+0x36>
 8003d1c:	2140      	movs	r1, #64	@ 0x40
 8003d1e:	f7ff ff09 	bl	8003b34 <_malloc_r>
 8003d22:	6028      	str	r0, [r5, #0]
 8003d24:	6128      	str	r0, [r5, #16]
 8003d26:	b930      	cbnz	r0, 8003d36 <_svfiprintf_r+0x32>
 8003d28:	230c      	movs	r3, #12
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d30:	b01d      	add	sp, #116	@ 0x74
 8003d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d36:	2340      	movs	r3, #64	@ 0x40
 8003d38:	616b      	str	r3, [r5, #20]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d3e:	2320      	movs	r3, #32
 8003d40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d44:	2330      	movs	r3, #48	@ 0x30
 8003d46:	f04f 0901 	mov.w	r9, #1
 8003d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d4e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003ee8 <_svfiprintf_r+0x1e4>
 8003d52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d56:	4623      	mov	r3, r4
 8003d58:	469a      	mov	sl, r3
 8003d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d5e:	b10a      	cbz	r2, 8003d64 <_svfiprintf_r+0x60>
 8003d60:	2a25      	cmp	r2, #37	@ 0x25
 8003d62:	d1f9      	bne.n	8003d58 <_svfiprintf_r+0x54>
 8003d64:	ebba 0b04 	subs.w	fp, sl, r4
 8003d68:	d00b      	beq.n	8003d82 <_svfiprintf_r+0x7e>
 8003d6a:	465b      	mov	r3, fp
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	4629      	mov	r1, r5
 8003d70:	4638      	mov	r0, r7
 8003d72:	f7ff ff6b 	bl	8003c4c <__ssputs_r>
 8003d76:	3001      	adds	r0, #1
 8003d78:	f000 80a7 	beq.w	8003eca <_svfiprintf_r+0x1c6>
 8003d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d7e:	445a      	add	r2, fp
 8003d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d82:	f89a 3000 	ldrb.w	r3, [sl]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 809f 	beq.w	8003eca <_svfiprintf_r+0x1c6>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d96:	f10a 0a01 	add.w	sl, sl, #1
 8003d9a:	9304      	str	r3, [sp, #16]
 8003d9c:	9307      	str	r3, [sp, #28]
 8003d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003da4:	4654      	mov	r4, sl
 8003da6:	2205      	movs	r2, #5
 8003da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dac:	484e      	ldr	r0, [pc, #312]	@ (8003ee8 <_svfiprintf_r+0x1e4>)
 8003dae:	f000 fa61 	bl	8004274 <memchr>
 8003db2:	9a04      	ldr	r2, [sp, #16]
 8003db4:	b9d8      	cbnz	r0, 8003dee <_svfiprintf_r+0xea>
 8003db6:	06d0      	lsls	r0, r2, #27
 8003db8:	bf44      	itt	mi
 8003dba:	2320      	movmi	r3, #32
 8003dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dc0:	0711      	lsls	r1, r2, #28
 8003dc2:	bf44      	itt	mi
 8003dc4:	232b      	movmi	r3, #43	@ 0x2b
 8003dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dca:	f89a 3000 	ldrb.w	r3, [sl]
 8003dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dd0:	d015      	beq.n	8003dfe <_svfiprintf_r+0xfa>
 8003dd2:	4654      	mov	r4, sl
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f04f 0c0a 	mov.w	ip, #10
 8003dda:	9a07      	ldr	r2, [sp, #28]
 8003ddc:	4621      	mov	r1, r4
 8003dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003de2:	3b30      	subs	r3, #48	@ 0x30
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d94b      	bls.n	8003e80 <_svfiprintf_r+0x17c>
 8003de8:	b1b0      	cbz	r0, 8003e18 <_svfiprintf_r+0x114>
 8003dea:	9207      	str	r2, [sp, #28]
 8003dec:	e014      	b.n	8003e18 <_svfiprintf_r+0x114>
 8003dee:	eba0 0308 	sub.w	r3, r0, r8
 8003df2:	fa09 f303 	lsl.w	r3, r9, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	46a2      	mov	sl, r4
 8003dfa:	9304      	str	r3, [sp, #16]
 8003dfc:	e7d2      	b.n	8003da4 <_svfiprintf_r+0xa0>
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	1d19      	adds	r1, r3, #4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	9103      	str	r1, [sp, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bfbb      	ittet	lt
 8003e0a:	425b      	neglt	r3, r3
 8003e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e10:	9307      	strge	r3, [sp, #28]
 8003e12:	9307      	strlt	r3, [sp, #28]
 8003e14:	bfb8      	it	lt
 8003e16:	9204      	strlt	r2, [sp, #16]
 8003e18:	7823      	ldrb	r3, [r4, #0]
 8003e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e1c:	d10a      	bne.n	8003e34 <_svfiprintf_r+0x130>
 8003e1e:	7863      	ldrb	r3, [r4, #1]
 8003e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e22:	d132      	bne.n	8003e8a <_svfiprintf_r+0x186>
 8003e24:	9b03      	ldr	r3, [sp, #12]
 8003e26:	3402      	adds	r4, #2
 8003e28:	1d1a      	adds	r2, r3, #4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	9203      	str	r2, [sp, #12]
 8003e2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e32:	9305      	str	r3, [sp, #20]
 8003e34:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003eec <_svfiprintf_r+0x1e8>
 8003e38:	2203      	movs	r2, #3
 8003e3a:	4650      	mov	r0, sl
 8003e3c:	7821      	ldrb	r1, [r4, #0]
 8003e3e:	f000 fa19 	bl	8004274 <memchr>
 8003e42:	b138      	cbz	r0, 8003e54 <_svfiprintf_r+0x150>
 8003e44:	2240      	movs	r2, #64	@ 0x40
 8003e46:	9b04      	ldr	r3, [sp, #16]
 8003e48:	eba0 000a 	sub.w	r0, r0, sl
 8003e4c:	4082      	lsls	r2, r0
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	3401      	adds	r4, #1
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e58:	2206      	movs	r2, #6
 8003e5a:	4825      	ldr	r0, [pc, #148]	@ (8003ef0 <_svfiprintf_r+0x1ec>)
 8003e5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e60:	f000 fa08 	bl	8004274 <memchr>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d036      	beq.n	8003ed6 <_svfiprintf_r+0x1d2>
 8003e68:	4b22      	ldr	r3, [pc, #136]	@ (8003ef4 <_svfiprintf_r+0x1f0>)
 8003e6a:	bb1b      	cbnz	r3, 8003eb4 <_svfiprintf_r+0x1b0>
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	3307      	adds	r3, #7
 8003e70:	f023 0307 	bic.w	r3, r3, #7
 8003e74:	3308      	adds	r3, #8
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e7a:	4433      	add	r3, r6
 8003e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e7e:	e76a      	b.n	8003d56 <_svfiprintf_r+0x52>
 8003e80:	460c      	mov	r4, r1
 8003e82:	2001      	movs	r0, #1
 8003e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e88:	e7a8      	b.n	8003ddc <_svfiprintf_r+0xd8>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f04f 0c0a 	mov.w	ip, #10
 8003e90:	4619      	mov	r1, r3
 8003e92:	3401      	adds	r4, #1
 8003e94:	9305      	str	r3, [sp, #20]
 8003e96:	4620      	mov	r0, r4
 8003e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e9c:	3a30      	subs	r2, #48	@ 0x30
 8003e9e:	2a09      	cmp	r2, #9
 8003ea0:	d903      	bls.n	8003eaa <_svfiprintf_r+0x1a6>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0c6      	beq.n	8003e34 <_svfiprintf_r+0x130>
 8003ea6:	9105      	str	r1, [sp, #20]
 8003ea8:	e7c4      	b.n	8003e34 <_svfiprintf_r+0x130>
 8003eaa:	4604      	mov	r4, r0
 8003eac:	2301      	movs	r3, #1
 8003eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eb2:	e7f0      	b.n	8003e96 <_svfiprintf_r+0x192>
 8003eb4:	ab03      	add	r3, sp, #12
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	462a      	mov	r2, r5
 8003eba:	4638      	mov	r0, r7
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <_svfiprintf_r+0x1f4>)
 8003ebe:	a904      	add	r1, sp, #16
 8003ec0:	f3af 8000 	nop.w
 8003ec4:	1c42      	adds	r2, r0, #1
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	d1d6      	bne.n	8003e78 <_svfiprintf_r+0x174>
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	065b      	lsls	r3, r3, #25
 8003ece:	f53f af2d 	bmi.w	8003d2c <_svfiprintf_r+0x28>
 8003ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ed4:	e72c      	b.n	8003d30 <_svfiprintf_r+0x2c>
 8003ed6:	ab03      	add	r3, sp, #12
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	462a      	mov	r2, r5
 8003edc:	4638      	mov	r0, r7
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <_svfiprintf_r+0x1f4>)
 8003ee0:	a904      	add	r1, sp, #16
 8003ee2:	f000 f87d 	bl	8003fe0 <_printf_i>
 8003ee6:	e7ed      	b.n	8003ec4 <_svfiprintf_r+0x1c0>
 8003ee8:	08004370 	.word	0x08004370
 8003eec:	08004376 	.word	0x08004376
 8003ef0:	0800437a 	.word	0x0800437a
 8003ef4:	00000000 	.word	0x00000000
 8003ef8:	08003c4d 	.word	0x08003c4d

08003efc <_printf_common>:
 8003efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	4616      	mov	r6, r2
 8003f02:	4698      	mov	r8, r3
 8003f04:	688a      	ldr	r2, [r1, #8]
 8003f06:	690b      	ldr	r3, [r1, #16]
 8003f08:	4607      	mov	r7, r0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfb8      	it	lt
 8003f0e:	4613      	movlt	r3, r2
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f16:	460c      	mov	r4, r1
 8003f18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f1c:	b10a      	cbz	r2, 8003f22 <_printf_common+0x26>
 8003f1e:	3301      	adds	r3, #1
 8003f20:	6033      	str	r3, [r6, #0]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	0699      	lsls	r1, r3, #26
 8003f26:	bf42      	ittt	mi
 8003f28:	6833      	ldrmi	r3, [r6, #0]
 8003f2a:	3302      	addmi	r3, #2
 8003f2c:	6033      	strmi	r3, [r6, #0]
 8003f2e:	6825      	ldr	r5, [r4, #0]
 8003f30:	f015 0506 	ands.w	r5, r5, #6
 8003f34:	d106      	bne.n	8003f44 <_printf_common+0x48>
 8003f36:	f104 0a19 	add.w	sl, r4, #25
 8003f3a:	68e3      	ldr	r3, [r4, #12]
 8003f3c:	6832      	ldr	r2, [r6, #0]
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	42ab      	cmp	r3, r5
 8003f42:	dc2b      	bgt.n	8003f9c <_printf_common+0xa0>
 8003f44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	3b00      	subs	r3, #0
 8003f4c:	bf18      	it	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	0692      	lsls	r2, r2, #26
 8003f52:	d430      	bmi.n	8003fb6 <_printf_common+0xba>
 8003f54:	4641      	mov	r1, r8
 8003f56:	4638      	mov	r0, r7
 8003f58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f5c:	47c8      	blx	r9
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d023      	beq.n	8003faa <_printf_common+0xae>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	f003 0306 	and.w	r3, r3, #6
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	bf14      	ite	ne
 8003f6e:	2500      	movne	r5, #0
 8003f70:	6833      	ldreq	r3, [r6, #0]
 8003f72:	f04f 0600 	mov.w	r6, #0
 8003f76:	bf08      	it	eq
 8003f78:	68e5      	ldreq	r5, [r4, #12]
 8003f7a:	f104 041a 	add.w	r4, r4, #26
 8003f7e:	bf08      	it	eq
 8003f80:	1aed      	subeq	r5, r5, r3
 8003f82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f86:	bf08      	it	eq
 8003f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bfc4      	itt	gt
 8003f90:	1a9b      	subgt	r3, r3, r2
 8003f92:	18ed      	addgt	r5, r5, r3
 8003f94:	42b5      	cmp	r5, r6
 8003f96:	d11a      	bne.n	8003fce <_printf_common+0xd2>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e008      	b.n	8003fae <_printf_common+0xb2>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4652      	mov	r2, sl
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	47c8      	blx	r9
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d103      	bne.n	8003fb2 <_printf_common+0xb6>
 8003faa:	f04f 30ff 	mov.w	r0, #4294967295
 8003fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb2:	3501      	adds	r5, #1
 8003fb4:	e7c1      	b.n	8003f3a <_printf_common+0x3e>
 8003fb6:	2030      	movs	r0, #48	@ 0x30
 8003fb8:	18e1      	adds	r1, r4, r3
 8003fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fc4:	4422      	add	r2, r4
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fcc:	e7c2      	b.n	8003f54 <_printf_common+0x58>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4622      	mov	r2, r4
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	47c8      	blx	r9
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d0e6      	beq.n	8003faa <_printf_common+0xae>
 8003fdc:	3601      	adds	r6, #1
 8003fde:	e7d9      	b.n	8003f94 <_printf_common+0x98>

08003fe0 <_printf_i>:
 8003fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	7e0f      	ldrb	r7, [r1, #24]
 8003fe6:	4691      	mov	r9, r2
 8003fe8:	2f78      	cmp	r7, #120	@ 0x78
 8003fea:	4680      	mov	r8, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	469a      	mov	sl, r3
 8003ff0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ff6:	d807      	bhi.n	8004008 <_printf_i+0x28>
 8003ff8:	2f62      	cmp	r7, #98	@ 0x62
 8003ffa:	d80a      	bhi.n	8004012 <_printf_i+0x32>
 8003ffc:	2f00      	cmp	r7, #0
 8003ffe:	f000 80d3 	beq.w	80041a8 <_printf_i+0x1c8>
 8004002:	2f58      	cmp	r7, #88	@ 0x58
 8004004:	f000 80ba 	beq.w	800417c <_printf_i+0x19c>
 8004008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800400c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004010:	e03a      	b.n	8004088 <_printf_i+0xa8>
 8004012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004016:	2b15      	cmp	r3, #21
 8004018:	d8f6      	bhi.n	8004008 <_printf_i+0x28>
 800401a:	a101      	add	r1, pc, #4	@ (adr r1, 8004020 <_printf_i+0x40>)
 800401c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004020:	08004079 	.word	0x08004079
 8004024:	0800408d 	.word	0x0800408d
 8004028:	08004009 	.word	0x08004009
 800402c:	08004009 	.word	0x08004009
 8004030:	08004009 	.word	0x08004009
 8004034:	08004009 	.word	0x08004009
 8004038:	0800408d 	.word	0x0800408d
 800403c:	08004009 	.word	0x08004009
 8004040:	08004009 	.word	0x08004009
 8004044:	08004009 	.word	0x08004009
 8004048:	08004009 	.word	0x08004009
 800404c:	0800418f 	.word	0x0800418f
 8004050:	080040b7 	.word	0x080040b7
 8004054:	08004149 	.word	0x08004149
 8004058:	08004009 	.word	0x08004009
 800405c:	08004009 	.word	0x08004009
 8004060:	080041b1 	.word	0x080041b1
 8004064:	08004009 	.word	0x08004009
 8004068:	080040b7 	.word	0x080040b7
 800406c:	08004009 	.word	0x08004009
 8004070:	08004009 	.word	0x08004009
 8004074:	08004151 	.word	0x08004151
 8004078:	6833      	ldr	r3, [r6, #0]
 800407a:	1d1a      	adds	r2, r3, #4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6032      	str	r2, [r6, #0]
 8004080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004088:	2301      	movs	r3, #1
 800408a:	e09e      	b.n	80041ca <_printf_i+0x1ea>
 800408c:	6833      	ldr	r3, [r6, #0]
 800408e:	6820      	ldr	r0, [r4, #0]
 8004090:	1d19      	adds	r1, r3, #4
 8004092:	6031      	str	r1, [r6, #0]
 8004094:	0606      	lsls	r6, r0, #24
 8004096:	d501      	bpl.n	800409c <_printf_i+0xbc>
 8004098:	681d      	ldr	r5, [r3, #0]
 800409a:	e003      	b.n	80040a4 <_printf_i+0xc4>
 800409c:	0645      	lsls	r5, r0, #25
 800409e:	d5fb      	bpl.n	8004098 <_printf_i+0xb8>
 80040a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040a4:	2d00      	cmp	r5, #0
 80040a6:	da03      	bge.n	80040b0 <_printf_i+0xd0>
 80040a8:	232d      	movs	r3, #45	@ 0x2d
 80040aa:	426d      	negs	r5, r5
 80040ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040b0:	230a      	movs	r3, #10
 80040b2:	4859      	ldr	r0, [pc, #356]	@ (8004218 <_printf_i+0x238>)
 80040b4:	e011      	b.n	80040da <_printf_i+0xfa>
 80040b6:	6821      	ldr	r1, [r4, #0]
 80040b8:	6833      	ldr	r3, [r6, #0]
 80040ba:	0608      	lsls	r0, r1, #24
 80040bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80040c0:	d402      	bmi.n	80040c8 <_printf_i+0xe8>
 80040c2:	0649      	lsls	r1, r1, #25
 80040c4:	bf48      	it	mi
 80040c6:	b2ad      	uxthmi	r5, r5
 80040c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80040ca:	6033      	str	r3, [r6, #0]
 80040cc:	bf14      	ite	ne
 80040ce:	230a      	movne	r3, #10
 80040d0:	2308      	moveq	r3, #8
 80040d2:	4851      	ldr	r0, [pc, #324]	@ (8004218 <_printf_i+0x238>)
 80040d4:	2100      	movs	r1, #0
 80040d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040da:	6866      	ldr	r6, [r4, #4]
 80040dc:	2e00      	cmp	r6, #0
 80040de:	bfa8      	it	ge
 80040e0:	6821      	ldrge	r1, [r4, #0]
 80040e2:	60a6      	str	r6, [r4, #8]
 80040e4:	bfa4      	itt	ge
 80040e6:	f021 0104 	bicge.w	r1, r1, #4
 80040ea:	6021      	strge	r1, [r4, #0]
 80040ec:	b90d      	cbnz	r5, 80040f2 <_printf_i+0x112>
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	d04b      	beq.n	800418a <_printf_i+0x1aa>
 80040f2:	4616      	mov	r6, r2
 80040f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80040f8:	fb03 5711 	mls	r7, r3, r1, r5
 80040fc:	5dc7      	ldrb	r7, [r0, r7]
 80040fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004102:	462f      	mov	r7, r5
 8004104:	42bb      	cmp	r3, r7
 8004106:	460d      	mov	r5, r1
 8004108:	d9f4      	bls.n	80040f4 <_printf_i+0x114>
 800410a:	2b08      	cmp	r3, #8
 800410c:	d10b      	bne.n	8004126 <_printf_i+0x146>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	07df      	lsls	r7, r3, #31
 8004112:	d508      	bpl.n	8004126 <_printf_i+0x146>
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	6861      	ldr	r1, [r4, #4]
 8004118:	4299      	cmp	r1, r3
 800411a:	bfde      	ittt	le
 800411c:	2330      	movle	r3, #48	@ 0x30
 800411e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004122:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004126:	1b92      	subs	r2, r2, r6
 8004128:	6122      	str	r2, [r4, #16]
 800412a:	464b      	mov	r3, r9
 800412c:	4621      	mov	r1, r4
 800412e:	4640      	mov	r0, r8
 8004130:	f8cd a000 	str.w	sl, [sp]
 8004134:	aa03      	add	r2, sp, #12
 8004136:	f7ff fee1 	bl	8003efc <_printf_common>
 800413a:	3001      	adds	r0, #1
 800413c:	d14a      	bne.n	80041d4 <_printf_i+0x1f4>
 800413e:	f04f 30ff 	mov.w	r0, #4294967295
 8004142:	b004      	add	sp, #16
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	f043 0320 	orr.w	r3, r3, #32
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	2778      	movs	r7, #120	@ 0x78
 8004152:	4832      	ldr	r0, [pc, #200]	@ (800421c <_printf_i+0x23c>)
 8004154:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	6831      	ldr	r1, [r6, #0]
 800415c:	061f      	lsls	r7, r3, #24
 800415e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004162:	d402      	bmi.n	800416a <_printf_i+0x18a>
 8004164:	065f      	lsls	r7, r3, #25
 8004166:	bf48      	it	mi
 8004168:	b2ad      	uxthmi	r5, r5
 800416a:	6031      	str	r1, [r6, #0]
 800416c:	07d9      	lsls	r1, r3, #31
 800416e:	bf44      	itt	mi
 8004170:	f043 0320 	orrmi.w	r3, r3, #32
 8004174:	6023      	strmi	r3, [r4, #0]
 8004176:	b11d      	cbz	r5, 8004180 <_printf_i+0x1a0>
 8004178:	2310      	movs	r3, #16
 800417a:	e7ab      	b.n	80040d4 <_printf_i+0xf4>
 800417c:	4826      	ldr	r0, [pc, #152]	@ (8004218 <_printf_i+0x238>)
 800417e:	e7e9      	b.n	8004154 <_printf_i+0x174>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	f023 0320 	bic.w	r3, r3, #32
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	e7f6      	b.n	8004178 <_printf_i+0x198>
 800418a:	4616      	mov	r6, r2
 800418c:	e7bd      	b.n	800410a <_printf_i+0x12a>
 800418e:	6833      	ldr	r3, [r6, #0]
 8004190:	6825      	ldr	r5, [r4, #0]
 8004192:	1d18      	adds	r0, r3, #4
 8004194:	6961      	ldr	r1, [r4, #20]
 8004196:	6030      	str	r0, [r6, #0]
 8004198:	062e      	lsls	r6, r5, #24
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	d501      	bpl.n	80041a2 <_printf_i+0x1c2>
 800419e:	6019      	str	r1, [r3, #0]
 80041a0:	e002      	b.n	80041a8 <_printf_i+0x1c8>
 80041a2:	0668      	lsls	r0, r5, #25
 80041a4:	d5fb      	bpl.n	800419e <_printf_i+0x1be>
 80041a6:	8019      	strh	r1, [r3, #0]
 80041a8:	2300      	movs	r3, #0
 80041aa:	4616      	mov	r6, r2
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	e7bc      	b.n	800412a <_printf_i+0x14a>
 80041b0:	6833      	ldr	r3, [r6, #0]
 80041b2:	2100      	movs	r1, #0
 80041b4:	1d1a      	adds	r2, r3, #4
 80041b6:	6032      	str	r2, [r6, #0]
 80041b8:	681e      	ldr	r6, [r3, #0]
 80041ba:	6862      	ldr	r2, [r4, #4]
 80041bc:	4630      	mov	r0, r6
 80041be:	f000 f859 	bl	8004274 <memchr>
 80041c2:	b108      	cbz	r0, 80041c8 <_printf_i+0x1e8>
 80041c4:	1b80      	subs	r0, r0, r6
 80041c6:	6060      	str	r0, [r4, #4]
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	2300      	movs	r3, #0
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041d2:	e7aa      	b.n	800412a <_printf_i+0x14a>
 80041d4:	4632      	mov	r2, r6
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d0ad      	beq.n	800413e <_printf_i+0x15e>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	079b      	lsls	r3, r3, #30
 80041e6:	d413      	bmi.n	8004210 <_printf_i+0x230>
 80041e8:	68e0      	ldr	r0, [r4, #12]
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	4298      	cmp	r0, r3
 80041ee:	bfb8      	it	lt
 80041f0:	4618      	movlt	r0, r3
 80041f2:	e7a6      	b.n	8004142 <_printf_i+0x162>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4632      	mov	r2, r6
 80041f8:	4649      	mov	r1, r9
 80041fa:	4640      	mov	r0, r8
 80041fc:	47d0      	blx	sl
 80041fe:	3001      	adds	r0, #1
 8004200:	d09d      	beq.n	800413e <_printf_i+0x15e>
 8004202:	3501      	adds	r5, #1
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	9903      	ldr	r1, [sp, #12]
 8004208:	1a5b      	subs	r3, r3, r1
 800420a:	42ab      	cmp	r3, r5
 800420c:	dcf2      	bgt.n	80041f4 <_printf_i+0x214>
 800420e:	e7eb      	b.n	80041e8 <_printf_i+0x208>
 8004210:	2500      	movs	r5, #0
 8004212:	f104 0619 	add.w	r6, r4, #25
 8004216:	e7f5      	b.n	8004204 <_printf_i+0x224>
 8004218:	08004381 	.word	0x08004381
 800421c:	08004392 	.word	0x08004392

08004220 <memmove>:
 8004220:	4288      	cmp	r0, r1
 8004222:	b510      	push	{r4, lr}
 8004224:	eb01 0402 	add.w	r4, r1, r2
 8004228:	d902      	bls.n	8004230 <memmove+0x10>
 800422a:	4284      	cmp	r4, r0
 800422c:	4623      	mov	r3, r4
 800422e:	d807      	bhi.n	8004240 <memmove+0x20>
 8004230:	1e43      	subs	r3, r0, #1
 8004232:	42a1      	cmp	r1, r4
 8004234:	d008      	beq.n	8004248 <memmove+0x28>
 8004236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800423a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800423e:	e7f8      	b.n	8004232 <memmove+0x12>
 8004240:	4601      	mov	r1, r0
 8004242:	4402      	add	r2, r0
 8004244:	428a      	cmp	r2, r1
 8004246:	d100      	bne.n	800424a <memmove+0x2a>
 8004248:	bd10      	pop	{r4, pc}
 800424a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800424e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004252:	e7f7      	b.n	8004244 <memmove+0x24>

08004254 <_sbrk_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	2300      	movs	r3, #0
 8004258:	4d05      	ldr	r5, [pc, #20]	@ (8004270 <_sbrk_r+0x1c>)
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	f7fc fc94 	bl	8000b8c <_sbrk>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_sbrk_r+0x1a>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_sbrk_r+0x1a>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	20000240 	.word	0x20000240

08004274 <memchr>:
 8004274:	4603      	mov	r3, r0
 8004276:	b510      	push	{r4, lr}
 8004278:	b2c9      	uxtb	r1, r1
 800427a:	4402      	add	r2, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	4618      	mov	r0, r3
 8004280:	d101      	bne.n	8004286 <memchr+0x12>
 8004282:	2000      	movs	r0, #0
 8004284:	e003      	b.n	800428e <memchr+0x1a>
 8004286:	7804      	ldrb	r4, [r0, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	428c      	cmp	r4, r1
 800428c:	d1f6      	bne.n	800427c <memchr+0x8>
 800428e:	bd10      	pop	{r4, pc}

08004290 <memcpy>:
 8004290:	440a      	add	r2, r1
 8004292:	4291      	cmp	r1, r2
 8004294:	f100 33ff 	add.w	r3, r0, #4294967295
 8004298:	d100      	bne.n	800429c <memcpy+0xc>
 800429a:	4770      	bx	lr
 800429c:	b510      	push	{r4, lr}
 800429e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a2:	4291      	cmp	r1, r2
 80042a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a8:	d1f9      	bne.n	800429e <memcpy+0xe>
 80042aa:	bd10      	pop	{r4, pc}

080042ac <_realloc_r>:
 80042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b0:	4680      	mov	r8, r0
 80042b2:	4615      	mov	r5, r2
 80042b4:	460c      	mov	r4, r1
 80042b6:	b921      	cbnz	r1, 80042c2 <_realloc_r+0x16>
 80042b8:	4611      	mov	r1, r2
 80042ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042be:	f7ff bc39 	b.w	8003b34 <_malloc_r>
 80042c2:	b92a      	cbnz	r2, 80042d0 <_realloc_r+0x24>
 80042c4:	f7ff fbcc 	bl	8003a60 <_free_r>
 80042c8:	2400      	movs	r4, #0
 80042ca:	4620      	mov	r0, r4
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	f000 f81a 	bl	8004308 <_malloc_usable_size_r>
 80042d4:	4285      	cmp	r5, r0
 80042d6:	4606      	mov	r6, r0
 80042d8:	d802      	bhi.n	80042e0 <_realloc_r+0x34>
 80042da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042de:	d8f4      	bhi.n	80042ca <_realloc_r+0x1e>
 80042e0:	4629      	mov	r1, r5
 80042e2:	4640      	mov	r0, r8
 80042e4:	f7ff fc26 	bl	8003b34 <_malloc_r>
 80042e8:	4607      	mov	r7, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d0ec      	beq.n	80042c8 <_realloc_r+0x1c>
 80042ee:	42b5      	cmp	r5, r6
 80042f0:	462a      	mov	r2, r5
 80042f2:	4621      	mov	r1, r4
 80042f4:	bf28      	it	cs
 80042f6:	4632      	movcs	r2, r6
 80042f8:	f7ff ffca 	bl	8004290 <memcpy>
 80042fc:	4621      	mov	r1, r4
 80042fe:	4640      	mov	r0, r8
 8004300:	f7ff fbae 	bl	8003a60 <_free_r>
 8004304:	463c      	mov	r4, r7
 8004306:	e7e0      	b.n	80042ca <_realloc_r+0x1e>

08004308 <_malloc_usable_size_r>:
 8004308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430c:	1f18      	subs	r0, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	bfbc      	itt	lt
 8004312:	580b      	ldrlt	r3, [r1, r0]
 8004314:	18c0      	addlt	r0, r0, r3
 8004316:	4770      	bx	lr

08004318 <_init>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	bf00      	nop
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr

08004324 <_fini>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	bf00      	nop
 8004328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432a:	bc08      	pop	{r3}
 800432c:	469e      	mov	lr, r3
 800432e:	4770      	bx	lr
